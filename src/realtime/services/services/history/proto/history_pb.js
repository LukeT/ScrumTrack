/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('../../../common/proto/common_pb.js');
goog.exportSymbol('proto.ticket.svc.history.LogItem', null, global);
goog.exportSymbol('proto.ticket.svc.history.LogResponse', null, global);
goog.exportSymbol('proto.ticket.svc.history.LogSprint', null, global);
goog.exportSymbol('proto.ticket.svc.history.LogTicket', null, global);
goog.exportSymbol('proto.ticket.svc.history.LogsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.history.LogItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.history.LogItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.history.LogItem.displayName = 'proto.ticket.svc.history.LogItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.history.LogItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.history.LogItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.history.LogItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    projectcode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    ticketid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sprintid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    old: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_new: jspb.Message.getFieldWithDefault(msg, 6, ""),
    internal: jspb.Message.getFieldWithDefault(msg, 9, false),
    createdat: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.history.LogItem}
 */
proto.ticket.svc.history.LogItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.history.LogItem;
  return proto.ticket.svc.history.LogItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.history.LogItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.history.LogItem}
 */
proto.ticket.svc.history.LogItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    case 4:
      var value = /** @type {!proto.ticket.common.LogType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOld(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNew(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInternal(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.history.LogItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.history.LogItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.history.LogItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTicketid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOld();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNew();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getInternal();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.history.LogItem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogItem.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectCode = 8;
 * @return {string}
 */
proto.ticket.svc.history.LogItem.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ticket.svc.history.LogItem.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 ticketId = 2;
 * @return {number}
 */
proto.ticket.svc.history.LogItem.prototype.getTicketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogItem.prototype.setTicketid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 sprintId = 3;
 * @return {number}
 */
proto.ticket.svc.history.LogItem.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogItem.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional ticket.common.LogType type = 4;
 * @return {!proto.ticket.common.LogType}
 */
proto.ticket.svc.history.LogItem.prototype.getType = function() {
  return /** @type {!proto.ticket.common.LogType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ticket.common.LogType} value */
proto.ticket.svc.history.LogItem.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string old = 5;
 * @return {string}
 */
proto.ticket.svc.history.LogItem.prototype.getOld = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ticket.svc.history.LogItem.prototype.setOld = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string new = 6;
 * @return {string}
 */
proto.ticket.svc.history.LogItem.prototype.getNew = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ticket.svc.history.LogItem.prototype.setNew = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool internal = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ticket.svc.history.LogItem.prototype.getInternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.ticket.svc.history.LogItem.prototype.setInternal = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int64 createdAt = 7;
 * @return {number}
 */
proto.ticket.svc.history.LogItem.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogItem.prototype.setCreatedat = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.history.LogSprint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.history.LogSprint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.history.LogSprint.displayName = 'proto.ticket.svc.history.LogSprint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.history.LogSprint.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.history.LogSprint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.history.LogSprint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogSprint.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sprintid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    from: jspb.Message.getFieldWithDefault(msg, 3, 0),
    to: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.history.LogSprint}
 */
proto.ticket.svc.history.LogSprint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.history.LogSprint;
  return proto.ticket.svc.history.LogSprint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.history.LogSprint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.history.LogSprint}
 */
proto.ticket.svc.history.LogSprint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.history.LogSprint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.history.LogSprint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.history.LogSprint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogSprint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFrom();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTo();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string projectCode = 1;
 * @return {string}
 */
proto.ticket.svc.history.LogSprint.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.history.LogSprint.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 sprintId = 2;
 * @return {number}
 */
proto.ticket.svc.history.LogSprint.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogSprint.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 from = 3;
 * @return {number}
 */
proto.ticket.svc.history.LogSprint.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogSprint.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 to = 4;
 * @return {number}
 */
proto.ticket.svc.history.LogSprint.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogSprint.prototype.setTo = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.history.LogTicket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.history.LogTicket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.history.LogTicket.displayName = 'proto.ticket.svc.history.LogTicket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.history.LogTicket.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.history.LogTicket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.history.LogTicket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogTicket.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.history.LogTicket}
 */
proto.ticket.svc.history.LogTicket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.history.LogTicket;
  return proto.ticket.svc.history.LogTicket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.history.LogTicket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.history.LogTicket}
 */
proto.ticket.svc.history.LogTicket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.history.LogTicket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.history.LogTicket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.history.LogTicket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogTicket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string projectCode = 1;
 * @return {string}
 */
proto.ticket.svc.history.LogTicket.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.history.LogTicket.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ticketId = 2;
 * @return {number}
 */
proto.ticket.svc.history.LogTicket.prototype.getTicketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.history.LogTicket.prototype.setTicketid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.history.LogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.history.LogsResponse.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.history.LogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.history.LogsResponse.displayName = 'proto.ticket.svc.history.LogsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.history.LogsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.history.LogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.history.LogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.history.LogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.ticket.svc.history.LogItem.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.history.LogsResponse}
 */
proto.ticket.svc.history.LogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.history.LogsResponse;
  return proto.ticket.svc.history.LogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.history.LogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.history.LogsResponse}
 */
proto.ticket.svc.history.LogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.history.LogItem;
      reader.readMessage(value,proto.ticket.svc.history.LogItem.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.history.LogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.history.LogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.history.LogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.history.LogItem.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LogItem logs = 1;
 * @return {!Array.<!proto.ticket.svc.history.LogItem>}
 */
proto.ticket.svc.history.LogsResponse.prototype.getLogsList = function() {
  return /** @type{!Array.<!proto.ticket.svc.history.LogItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.history.LogItem, 1));
};


/** @param {!Array.<!proto.ticket.svc.history.LogItem>} value */
proto.ticket.svc.history.LogsResponse.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.history.LogItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.history.LogItem}
 */
proto.ticket.svc.history.LogsResponse.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.history.LogItem, opt_index);
};


proto.ticket.svc.history.LogsResponse.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.history.LogsResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.history.LogsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.history.LogsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.history.LogsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.history.LogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.history.LogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.history.LogResponse.displayName = 'proto.ticket.svc.history.LogResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.history.LogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.history.LogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.history.LogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    log: (f = msg.getLog()) && proto.ticket.svc.history.LogItem.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.history.LogResponse}
 */
proto.ticket.svc.history.LogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.history.LogResponse;
  return proto.ticket.svc.history.LogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.history.LogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.history.LogResponse}
 */
proto.ticket.svc.history.LogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.history.LogItem;
      reader.readMessage(value,proto.ticket.svc.history.LogItem.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.history.LogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.history.LogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.history.LogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.history.LogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.svc.history.LogItem.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional LogItem log = 1;
 * @return {?proto.ticket.svc.history.LogItem}
 */
proto.ticket.svc.history.LogResponse.prototype.getLog = function() {
  return /** @type{?proto.ticket.svc.history.LogItem} */ (
    jspb.Message.getWrapperField(this, proto.ticket.svc.history.LogItem, 1));
};


/** @param {?proto.ticket.svc.history.LogItem|undefined} value */
proto.ticket.svc.history.LogResponse.prototype.setLog = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ticket.svc.history.LogResponse.prototype.clearLog = function() {
  this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.history.LogResponse.prototype.hasLog = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.history.LogResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.history.LogResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.history.LogResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.history.LogResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.ticket.svc.history);
