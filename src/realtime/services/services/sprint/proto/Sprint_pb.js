/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('../../../common/proto/common_pb.js');
goog.exportSymbol('proto.ticket.svc.sprint.Sprint', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintById', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintByProject', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintComment', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintCommentId', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintCommentIdWithSprint', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintCommentResponse', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintCommentsResponse', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintIdAndProject', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintResponse', null, global);
goog.exportSymbol('proto.ticket.svc.sprint.SprintsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintById = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintById, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintById.displayName = 'proto.ticket.svc.sprint.SprintById';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintById.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintById.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintById} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintById.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintById}
 */
proto.ticket.svc.sprint.SprintById.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintById;
  return proto.ticket.svc.sprint.SprintById.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintById} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintById}
 */
proto.ticket.svc.sprint.SprintById.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintById.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintById.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintById} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintById.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintById.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintById.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintByProject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintByProject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintByProject.displayName = 'proto.ticket.svc.sprint.SprintByProject';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintByProject.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintByProject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintByProject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintByProject.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintByProject}
 */
proto.ticket.svc.sprint.SprintByProject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintByProject;
  return proto.ticket.svc.sprint.SprintByProject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintByProject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintByProject}
 */
proto.ticket.svc.sprint.SprintByProject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintByProject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintByProject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintByProject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintByProject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string projectId = 1;
 * @return {string}
 */
proto.ticket.svc.sprint.SprintByProject.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.SprintByProject.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.Sprint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.Sprint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.Sprint.displayName = 'proto.ticket.svc.sprint.Sprint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.Sprint.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.Sprint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.Sprint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.Sprint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startedat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    projectcode: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.Sprint}
 */
proto.ticket.svc.sprint.Sprint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.Sprint;
  return proto.ticket.svc.sprint.Sprint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.Sprint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.Sprint}
 */
proto.ticket.svc.sprint.Sprint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartedat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndat(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.Sprint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.Sprint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.Sprint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.Sprint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStartedat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEndat();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.sprint.Sprint.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.Sprint.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.svc.sprint.Sprint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.Sprint.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 duration = 3;
 * @return {number}
 */
proto.ticket.svc.sprint.Sprint.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.Sprint.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 startedAt = 4;
 * @return {number}
 */
proto.ticket.svc.sprint.Sprint.prototype.getStartedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.Sprint.prototype.setStartedat = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 endAt = 5;
 * @return {number}
 */
proto.ticket.svc.sprint.Sprint.prototype.getEndat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.Sprint.prototype.setEndat = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string projectCode = 6;
 * @return {string}
 */
proto.ticket.svc.sprint.Sprint.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.Sprint.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintResponse.displayName = 'proto.ticket.svc.sprint.SprintResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sprint: (f = msg.getSprint()) && proto.ticket.svc.sprint.Sprint.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintResponse}
 */
proto.ticket.svc.sprint.SprintResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintResponse;
  return proto.ticket.svc.sprint.SprintResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintResponse}
 */
proto.ticket.svc.sprint.SprintResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.sprint.Sprint;
      reader.readMessage(value,proto.ticket.svc.sprint.Sprint.deserializeBinaryFromReader);
      msg.setSprint(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSprint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.svc.sprint.Sprint.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Sprint sprint = 1;
 * @return {?proto.ticket.svc.sprint.Sprint}
 */
proto.ticket.svc.sprint.SprintResponse.prototype.getSprint = function() {
  return /** @type{?proto.ticket.svc.sprint.Sprint} */ (
    jspb.Message.getWrapperField(this, proto.ticket.svc.sprint.Sprint, 1));
};


/** @param {?proto.ticket.svc.sprint.Sprint|undefined} value */
proto.ticket.svc.sprint.SprintResponse.prototype.setSprint = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ticket.svc.sprint.SprintResponse.prototype.clearSprint = function() {
  this.setSprint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.sprint.SprintResponse.prototype.hasSprint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.sprint.SprintResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.sprint.SprintResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.sprint.SprintResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.sprint.SprintResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.sprint.SprintsResponse.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintsResponse.displayName = 'proto.ticket.svc.sprint.SprintsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.sprint.SprintsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sprintsList: jspb.Message.toObjectList(msg.getSprintsList(),
    proto.ticket.svc.sprint.Sprint.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintsResponse}
 */
proto.ticket.svc.sprint.SprintsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintsResponse;
  return proto.ticket.svc.sprint.SprintsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintsResponse}
 */
proto.ticket.svc.sprint.SprintsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.sprint.Sprint;
      reader.readMessage(value,proto.ticket.svc.sprint.Sprint.deserializeBinaryFromReader);
      msg.addSprints(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSprintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.sprint.Sprint.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Sprint sprints = 1;
 * @return {!Array.<!proto.ticket.svc.sprint.Sprint>}
 */
proto.ticket.svc.sprint.SprintsResponse.prototype.getSprintsList = function() {
  return /** @type{!Array.<!proto.ticket.svc.sprint.Sprint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.sprint.Sprint, 1));
};


/** @param {!Array.<!proto.ticket.svc.sprint.Sprint>} value */
proto.ticket.svc.sprint.SprintsResponse.prototype.setSprintsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.sprint.Sprint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.sprint.Sprint}
 */
proto.ticket.svc.sprint.SprintsResponse.prototype.addSprints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.sprint.Sprint, opt_index);
};


proto.ticket.svc.sprint.SprintsResponse.prototype.clearSprintsList = function() {
  this.setSprintsList([]);
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.sprint.SprintsResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.sprint.SprintsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.sprint.SprintsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.sprint.SprintsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintComment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintComment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintComment.displayName = 'proto.ticket.svc.sprint.SprintComment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintComment.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintComment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintComment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintComment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    projectcode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sprintid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    resolvedid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintComment}
 */
proto.ticket.svc.sprint.SprintComment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintComment;
  return proto.ticket.svc.sprint.SprintComment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintComment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintComment}
 */
proto.ticket.svc.sprint.SprintComment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAuthorid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolvedid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintComment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintComment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintComment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintComment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAuthorid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getResolvedid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintComment.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 authorId = 2;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getAuthorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintComment.prototype.setAuthorid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string projectCode = 8;
 * @return {string}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.SprintComment.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.SprintComment.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.SprintComment.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 createdAt = 5;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintComment.prototype.setCreatedat = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 sprintId = 6;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintComment.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 resolvedId = 7;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintComment.prototype.getResolvedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintComment.prototype.setResolvedid = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintCommentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintCommentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintCommentResponse.displayName = 'proto.ticket.svc.sprint.SprintCommentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintCommentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintCommentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: (f = msg.getComment()) && proto.ticket.svc.sprint.SprintComment.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintCommentResponse}
 */
proto.ticket.svc.sprint.SprintCommentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintCommentResponse;
  return proto.ticket.svc.sprint.SprintCommentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintCommentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintCommentResponse}
 */
proto.ticket.svc.sprint.SprintCommentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.sprint.SprintComment;
      reader.readMessage(value,proto.ticket.svc.sprint.SprintComment.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintCommentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintCommentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.svc.sprint.SprintComment.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional SprintComment comment = 1;
 * @return {?proto.ticket.svc.sprint.SprintComment}
 */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.getComment = function() {
  return /** @type{?proto.ticket.svc.sprint.SprintComment} */ (
    jspb.Message.getWrapperField(this, proto.ticket.svc.sprint.SprintComment, 1));
};


/** @param {?proto.ticket.svc.sprint.SprintComment|undefined} value */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.setComment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ticket.svc.sprint.SprintCommentResponse.prototype.clearComment = function() {
  this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.hasComment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.sprint.SprintCommentResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.sprint.SprintCommentResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintCommentsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.sprint.SprintCommentsResponse.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintCommentsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintCommentsResponse.displayName = 'proto.ticket.svc.sprint.SprintCommentsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.sprint.SprintCommentsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintCommentsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintCommentsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.ticket.svc.sprint.SprintComment.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintCommentsResponse}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintCommentsResponse;
  return proto.ticket.svc.sprint.SprintCommentsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintCommentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintCommentsResponse}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.sprint.SprintComment;
      reader.readMessage(value,proto.ticket.svc.sprint.SprintComment.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintCommentsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintCommentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.sprint.SprintComment.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SprintComment comments = 1;
 * @return {!Array.<!proto.ticket.svc.sprint.SprintComment>}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.getCommentsList = function() {
  return /** @type{!Array.<!proto.ticket.svc.sprint.SprintComment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.sprint.SprintComment, 1));
};


/** @param {!Array.<!proto.ticket.svc.sprint.SprintComment>} value */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.setCommentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.sprint.SprintComment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.sprint.SprintComment}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.sprint.SprintComment, opt_index);
};


proto.ticket.svc.sprint.SprintCommentsResponse.prototype.clearCommentsList = function() {
  this.setCommentsList([]);
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.sprint.SprintCommentsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.sprint.SprintCommentsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintCommentId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintCommentId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintCommentId.displayName = 'proto.ticket.svc.sprint.SprintCommentId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintCommentId.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintCommentId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintCommentId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    project: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintCommentId}
 */
proto.ticket.svc.sprint.SprintCommentId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintCommentId;
  return proto.ticket.svc.sprint.SprintCommentId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintCommentId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintCommentId}
 */
proto.ticket.svc.sprint.SprintCommentId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintCommentId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintCommentId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintCommentId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintCommentId.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintCommentId.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.ticket.svc.sprint.SprintCommentId.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.SprintCommentId.prototype.setProject = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintCommentIdWithSprint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintCommentIdWithSprint.displayName = 'proto.ticket.svc.sprint.SprintCommentIdWithSprint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintCommentIdWithSprint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintCommentIdWithSprint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sprintid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintCommentIdWithSprint}
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintCommentIdWithSprint;
  return proto.ticket.svc.sprint.SprintCommentIdWithSprint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintCommentIdWithSprint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintCommentIdWithSprint}
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintCommentIdWithSprint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintCommentIdWithSprint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.setProject = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 sprintId = 3;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintCommentIdWithSprint.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.sprint.SprintIdAndProject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.sprint.SprintIdAndProject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.sprint.SprintIdAndProject.displayName = 'proto.ticket.svc.sprint.SprintIdAndProject';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.sprint.SprintIdAndProject.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.sprint.SprintIdAndProject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.sprint.SprintIdAndProject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintIdAndProject.toObject = function(includeInstance, msg) {
  var f, obj = {
    sprintid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    project: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.sprint.SprintIdAndProject}
 */
proto.ticket.svc.sprint.SprintIdAndProject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.sprint.SprintIdAndProject;
  return proto.ticket.svc.sprint.SprintIdAndProject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.sprint.SprintIdAndProject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.sprint.SprintIdAndProject}
 */
proto.ticket.svc.sprint.SprintIdAndProject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.sprint.SprintIdAndProject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.sprint.SprintIdAndProject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.sprint.SprintIdAndProject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.sprint.SprintIdAndProject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 sprintId = 1;
 * @return {number}
 */
proto.ticket.svc.sprint.SprintIdAndProject.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.sprint.SprintIdAndProject.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.ticket.svc.sprint.SprintIdAndProject.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.sprint.SprintIdAndProject.prototype.setProject = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.ticket.svc.sprint);
