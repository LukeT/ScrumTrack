/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('../../../common/proto/common_pb.js');
goog.exportSymbol('proto.ticket.svc.ticket.Categories', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.Category', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.CommentResponse', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.CommentsListResponse', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.GetAllRequest', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.GetRequest', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.LocationType', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.MoveRequest', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.MoveWithinSprintRequest', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.Ticket', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.TicketComment', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.TicketResponse', null, global);
goog.exportSymbol('proto.ticket.svc.ticket.TicketsListResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.GetAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.ticket.GetAllRequest.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.ticket.GetAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.GetAllRequest.displayName = 'proto.ticket.svc.ticket.GetAllRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.ticket.GetAllRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.GetAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.GetAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.GetAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectsc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    locationtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    statusList: jspb.Message.getRepeatedField(msg, 3),
    sprintid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    workflowid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.GetAllRequest}
 */
proto.ticket.svc.ticket.GetAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.GetAllRequest;
  return proto.ticket.svc.ticket.GetAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.GetAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.GetAllRequest}
 */
proto.ticket.svc.ticket.GetAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectsc(value);
      break;
    case 2:
      var value = /** @type {!proto.ticket.svc.ticket.LocationType} */ (reader.readEnum());
      msg.setLocationtype(value);
      break;
    case 3:
      var value = /** @type {!Array.<!proto.ticket.common.TicketStatus>} */ (reader.readPackedEnum());
      msg.setStatusList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkflowid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.GetAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.GetAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.GetAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectsc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWorkflowid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string projectSC = 1;
 * @return {string}
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.getProjectsc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.GetAllRequest.prototype.setProjectsc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional LocationType locationType = 2;
 * @return {!proto.ticket.svc.ticket.LocationType}
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.getLocationtype = function() {
  return /** @type {!proto.ticket.svc.ticket.LocationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ticket.svc.ticket.LocationType} value */
proto.ticket.svc.ticket.GetAllRequest.prototype.setLocationtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated ticket.common.TicketStatus status = 3;
 * @return {!Array.<!proto.ticket.common.TicketStatus>}
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.getStatusList = function() {
  return /** @type {!Array.<!proto.ticket.common.TicketStatus>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<!proto.ticket.common.TicketStatus>} value */
proto.ticket.svc.ticket.GetAllRequest.prototype.setStatusList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.ticket.common.TicketStatus} value
 * @param {number=} opt_index
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.addStatus = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.ticket.svc.ticket.GetAllRequest.prototype.clearStatusList = function() {
  this.setStatusList([]);
};


/**
 * optional int32 sprintId = 4;
 * @return {number}
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.GetAllRequest.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 workflowId = 5;
 * @return {number}
 */
proto.ticket.svc.ticket.GetAllRequest.prototype.getWorkflowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.GetAllRequest.prototype.setWorkflowid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.GetRequest.displayName = 'proto.ticket.svc.ticket.GetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectsc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.GetRequest}
 */
proto.ticket.svc.ticket.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.GetRequest;
  return proto.ticket.svc.ticket.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.GetRequest}
 */
proto.ticket.svc.ticket.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectsc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectsc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string projectSC = 1;
 * @return {string}
 */
proto.ticket.svc.ticket.GetRequest.prototype.getProjectsc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.GetRequest.prototype.setProjectsc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ticketId = 2;
 * @return {number}
 */
proto.ticket.svc.ticket.GetRequest.prototype.getTicketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.GetRequest.prototype.setTicketid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.TicketsListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.ticket.TicketsListResponse.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.ticket.TicketsListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.TicketsListResponse.displayName = 'proto.ticket.svc.ticket.TicketsListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.ticket.TicketsListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.TicketsListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.TicketsListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.TicketsListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.TicketsListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketsList: jspb.Message.toObjectList(msg.getTicketsList(),
    proto.ticket.svc.ticket.Ticket.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.TicketsListResponse}
 */
proto.ticket.svc.ticket.TicketsListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.TicketsListResponse;
  return proto.ticket.svc.ticket.TicketsListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.TicketsListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.TicketsListResponse}
 */
proto.ticket.svc.ticket.TicketsListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.ticket.Ticket;
      reader.readMessage(value,proto.ticket.svc.ticket.Ticket.deserializeBinaryFromReader);
      msg.addTickets(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.TicketsListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.TicketsListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.TicketsListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.TicketsListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.ticket.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ticket tickets = 1;
 * @return {!Array.<!proto.ticket.svc.ticket.Ticket>}
 */
proto.ticket.svc.ticket.TicketsListResponse.prototype.getTicketsList = function() {
  return /** @type{!Array.<!proto.ticket.svc.ticket.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.ticket.Ticket, 1));
};


/** @param {!Array.<!proto.ticket.svc.ticket.Ticket>} value */
proto.ticket.svc.ticket.TicketsListResponse.prototype.setTicketsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.ticket.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.ticket.Ticket}
 */
proto.ticket.svc.ticket.TicketsListResponse.prototype.addTickets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.ticket.Ticket, opt_index);
};


proto.ticket.svc.ticket.TicketsListResponse.prototype.clearTicketsList = function() {
  this.setTicketsList([]);
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.ticket.TicketsListResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.ticket.TicketsListResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.ticket.TicketsListResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.ticket.TicketsListResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.TicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.TicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.TicketResponse.displayName = 'proto.ticket.svc.ticket.TicketResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.TicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.TicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.TicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.TicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: (f = msg.getTicket()) && proto.ticket.svc.ticket.Ticket.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.TicketResponse}
 */
proto.ticket.svc.ticket.TicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.TicketResponse;
  return proto.ticket.svc.ticket.TicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.TicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.TicketResponse}
 */
proto.ticket.svc.ticket.TicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.ticket.Ticket;
      reader.readMessage(value,proto.ticket.svc.ticket.Ticket.deserializeBinaryFromReader);
      msg.setTicket(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.TicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.TicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.TicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.TicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.svc.ticket.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket ticket = 1;
 * @return {?proto.ticket.svc.ticket.Ticket}
 */
proto.ticket.svc.ticket.TicketResponse.prototype.getTicket = function() {
  return /** @type{?proto.ticket.svc.ticket.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.ticket.svc.ticket.Ticket, 1));
};


/** @param {?proto.ticket.svc.ticket.Ticket|undefined} value */
proto.ticket.svc.ticket.TicketResponse.prototype.setTicket = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ticket.svc.ticket.TicketResponse.prototype.clearTicket = function() {
  this.setTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.ticket.TicketResponse.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.ticket.TicketResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.ticket.TicketResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.ticket.TicketResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.ticket.TicketResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.Ticket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.Ticket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.Ticket.displayName = 'proto.ticket.svc.ticket.Ticket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.Ticket.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.Ticket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.Ticket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.Ticket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    projectcode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    body: jspb.Message.getFieldWithDefault(msg, 3, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 14, 0),
    locationtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sprintid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    previousticket: jspb.Message.getFieldWithDefault(msg, 6, 0),
    workflowid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    workflowposition: jspb.Message.getFieldWithDefault(msg, 13, 0),
    creatoruserid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    assigneeuserid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    createdat: jspb.Message.getFieldWithDefault(msg, 7, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 8, 0),
    category: jspb.Message.getFieldWithDefault(msg, 16, ""),
    status: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.Ticket}
 */
proto.ticket.svc.ticket.Ticket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.Ticket;
  return proto.ticket.svc.ticket.Ticket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.Ticket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.Ticket}
 */
proto.ticket.svc.ticket.Ticket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    case 4:
      var value = /** @type {!proto.ticket.svc.ticket.LocationType} */ (reader.readEnum());
      msg.setLocationtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPreviousticket(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkflowid(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkflowposition(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatoruserid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAssigneeuserid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedat(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 15:
      var value = /** @type {!proto.ticket.common.TicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.Ticket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.Ticket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.Ticket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.Ticket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getLocationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPreviousticket();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWorkflowid();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getWorkflowposition();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getCreatoruserid();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getAssigneeuserid();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectCode = 9;
 * @return {string}
 */
proto.ticket.svc.ticket.Ticket.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.Ticket.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.ticket.svc.ticket.Ticket.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.Ticket.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string body = 3;
 * @return {string}
 */
proto.ticket.svc.ticket.Ticket.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.Ticket.prototype.setBody = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 weight = 14;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional LocationType locationType = 4;
 * @return {!proto.ticket.svc.ticket.LocationType}
 */
proto.ticket.svc.ticket.Ticket.prototype.getLocationtype = function() {
  return /** @type {!proto.ticket.svc.ticket.LocationType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ticket.svc.ticket.LocationType} value */
proto.ticket.svc.ticket.Ticket.prototype.setLocationtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 sprintId = 5;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 previousTicket = 6;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getPreviousticket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setPreviousticket = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 workflowId = 12;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getWorkflowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setWorkflowid = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 workflowPosition = 13;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getWorkflowposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setWorkflowposition = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 creatorUserId = 10;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getCreatoruserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setCreatoruserid = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int32 assigneeUserId = 11;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getAssigneeuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setAssigneeuserid = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int64 createdAt = 7;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setCreatedat = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 updatedAt = 8;
 * @return {number}
 */
proto.ticket.svc.ticket.Ticket.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Ticket.prototype.setUpdatedat = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string category = 16;
 * @return {string}
 */
proto.ticket.svc.ticket.Ticket.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.Ticket.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional ticket.common.TicketStatus status = 15;
 * @return {!proto.ticket.common.TicketStatus}
 */
proto.ticket.svc.ticket.Ticket.prototype.getStatus = function() {
  return /** @type {!proto.ticket.common.TicketStatus} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.ticket.common.TicketStatus} value */
proto.ticket.svc.ticket.Ticket.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.TicketComment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.TicketComment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.TicketComment.displayName = 'proto.ticket.svc.ticket.TicketComment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.TicketComment.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.TicketComment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.TicketComment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.TicketComment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    projectcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ticketid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    body: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.TicketComment}
 */
proto.ticket.svc.ticket.TicketComment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.TicketComment;
  return proto.ticket.svc.ticket.TicketComment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.TicketComment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.TicketComment}
 */
proto.ticket.svc.ticket.TicketComment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.TicketComment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.TicketComment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.TicketComment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.TicketComment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTicketid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ticket.svc.ticket.TicketComment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.TicketComment.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string projectCode = 2;
 * @return {string}
 */
proto.ticket.svc.ticket.TicketComment.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.TicketComment.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 ticketId = 3;
 * @return {number}
 */
proto.ticket.svc.ticket.TicketComment.prototype.getTicketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.TicketComment.prototype.setTicketid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string body = 4;
 * @return {string}
 */
proto.ticket.svc.ticket.TicketComment.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.TicketComment.prototype.setBody = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 userId = 5;
 * @return {number}
 */
proto.ticket.svc.ticket.TicketComment.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.TicketComment.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.CommentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.CommentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.CommentResponse.displayName = 'proto.ticket.svc.ticket.CommentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.CommentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.CommentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.CommentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.CommentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: (f = msg.getComment()) && proto.ticket.svc.ticket.TicketComment.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.CommentResponse}
 */
proto.ticket.svc.ticket.CommentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.CommentResponse;
  return proto.ticket.svc.ticket.CommentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.CommentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.CommentResponse}
 */
proto.ticket.svc.ticket.CommentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.ticket.TicketComment;
      reader.readMessage(value,proto.ticket.svc.ticket.TicketComment.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.CommentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.CommentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.CommentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.CommentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.svc.ticket.TicketComment.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketComment comment = 1;
 * @return {?proto.ticket.svc.ticket.TicketComment}
 */
proto.ticket.svc.ticket.CommentResponse.prototype.getComment = function() {
  return /** @type{?proto.ticket.svc.ticket.TicketComment} */ (
    jspb.Message.getWrapperField(this, proto.ticket.svc.ticket.TicketComment, 1));
};


/** @param {?proto.ticket.svc.ticket.TicketComment|undefined} value */
proto.ticket.svc.ticket.CommentResponse.prototype.setComment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ticket.svc.ticket.CommentResponse.prototype.clearComment = function() {
  this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.ticket.CommentResponse.prototype.hasComment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.ticket.CommentResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.ticket.CommentResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.ticket.CommentResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.ticket.CommentResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.MoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.MoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.MoveRequest.displayName = 'proto.ticket.svc.ticket.MoveRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.MoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.MoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.MoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.MoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    previousticket: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sprintid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.MoveRequest}
 */
proto.ticket.svc.ticket.MoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.MoveRequest;
  return proto.ticket.svc.ticket.MoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.MoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.MoveRequest}
 */
proto.ticket.svc.ticket.MoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPreviousticket(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSprintid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.MoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.MoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.MoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.MoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPreviousticket();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSprintid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string projectCode = 1;
 * @return {string}
 */
proto.ticket.svc.ticket.MoveRequest.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.MoveRequest.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ticketId = 2;
 * @return {number}
 */
proto.ticket.svc.ticket.MoveRequest.prototype.getTicketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.MoveRequest.prototype.setTicketid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 previousTicket = 3;
 * @return {number}
 */
proto.ticket.svc.ticket.MoveRequest.prototype.getPreviousticket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.MoveRequest.prototype.setPreviousticket = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 sprintId = 4;
 * @return {number}
 */
proto.ticket.svc.ticket.MoveRequest.prototype.getSprintid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.MoveRequest.prototype.setSprintid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.MoveWithinSprintRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.MoveWithinSprintRequest.displayName = 'proto.ticket.svc.ticket.MoveWithinSprintRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.MoveWithinSprintRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.MoveWithinSprintRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    workflowid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    order: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.MoveWithinSprintRequest}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.MoveWithinSprintRequest;
  return proto.ticket.svc.ticket.MoveWithinSprintRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.MoveWithinSprintRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.MoveWithinSprintRequest}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkflowid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.MoveWithinSprintRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.MoveWithinSprintRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWorkflowid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string projectCode = 1;
 * @return {string}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.getProjectcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.setProjectcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ticketId = 2;
 * @return {number}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.getTicketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.setTicketid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 workflowId = 3;
 * @return {number}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.getWorkflowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.setWorkflowid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 order = 4;
 * @return {number}
 */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.MoveWithinSprintRequest.prototype.setOrder = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.CommentsListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.ticket.CommentsListResponse.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.ticket.CommentsListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.CommentsListResponse.displayName = 'proto.ticket.svc.ticket.CommentsListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.ticket.CommentsListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.CommentsListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.CommentsListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.CommentsListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.CommentsListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.ticket.svc.ticket.TicketComment.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.CommentsListResponse}
 */
proto.ticket.svc.ticket.CommentsListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.CommentsListResponse;
  return proto.ticket.svc.ticket.CommentsListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.CommentsListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.CommentsListResponse}
 */
proto.ticket.svc.ticket.CommentsListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.ticket.TicketComment;
      reader.readMessage(value,proto.ticket.svc.ticket.TicketComment.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.CommentsListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.CommentsListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.CommentsListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.CommentsListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.ticket.TicketComment.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketComment comments = 1;
 * @return {!Array.<!proto.ticket.svc.ticket.TicketComment>}
 */
proto.ticket.svc.ticket.CommentsListResponse.prototype.getCommentsList = function() {
  return /** @type{!Array.<!proto.ticket.svc.ticket.TicketComment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.ticket.TicketComment, 1));
};


/** @param {!Array.<!proto.ticket.svc.ticket.TicketComment>} value */
proto.ticket.svc.ticket.CommentsListResponse.prototype.setCommentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.ticket.TicketComment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.ticket.TicketComment}
 */
proto.ticket.svc.ticket.CommentsListResponse.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.ticket.TicketComment, opt_index);
};


proto.ticket.svc.ticket.CommentsListResponse.prototype.clearCommentsList = function() {
  this.setCommentsList([]);
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.ticket.CommentsListResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.ticket.CommentsListResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.ticket.CommentsListResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.ticket.CommentsListResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.Category = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.ticket.Category, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.Category.displayName = 'proto.ticket.svc.ticket.Category';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.Category.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.Category.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.Category} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.Category.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.Category}
 */
proto.ticket.svc.ticket.Category.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.Category;
  return proto.ticket.svc.ticket.Category.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.Category} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.Category}
 */
proto.ticket.svc.ticket.Category.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.Category.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.Category.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.Category} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.Category.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ticket.svc.ticket.Category.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.ticket.Category.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.ticket.svc.ticket.Category.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ticket.svc.ticket.Category.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.ticket.Categories = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.ticket.Categories.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.ticket.Categories, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.ticket.Categories.displayName = 'proto.ticket.svc.ticket.Categories';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.ticket.Categories.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.ticket.Categories.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.ticket.Categories.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.ticket.Categories} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.Categories.toObject = function(includeInstance, msg) {
  var f, obj = {
    categoriesList: jspb.Message.toObjectList(msg.getCategoriesList(),
    proto.ticket.svc.ticket.Category.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.ticket.Categories}
 */
proto.ticket.svc.ticket.Categories.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.ticket.Categories;
  return proto.ticket.svc.ticket.Categories.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.ticket.Categories} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.ticket.Categories}
 */
proto.ticket.svc.ticket.Categories.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.ticket.Category;
      reader.readMessage(value,proto.ticket.svc.ticket.Category.deserializeBinaryFromReader);
      msg.addCategories(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.ticket.Categories.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.ticket.Categories.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.ticket.Categories} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.ticket.Categories.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.ticket.Category.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Category categories = 1;
 * @return {!Array.<!proto.ticket.svc.ticket.Category>}
 */
proto.ticket.svc.ticket.Categories.prototype.getCategoriesList = function() {
  return /** @type{!Array.<!proto.ticket.svc.ticket.Category>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.ticket.Category, 1));
};


/** @param {!Array.<!proto.ticket.svc.ticket.Category>} value */
proto.ticket.svc.ticket.Categories.prototype.setCategoriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.ticket.Category=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.ticket.Category}
 */
proto.ticket.svc.ticket.Categories.prototype.addCategories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.ticket.Category, opt_index);
};


proto.ticket.svc.ticket.Categories.prototype.clearCategoriesList = function() {
  this.setCategoriesList([]);
};


/**
 * @enum {number}
 */
proto.ticket.svc.ticket.LocationType = {
  BACKLOG: 0,
  SPRINT: 1,
  PENDING: 2
};

goog.object.extend(exports, proto.ticket.svc.ticket);
