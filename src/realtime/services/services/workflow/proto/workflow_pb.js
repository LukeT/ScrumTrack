/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('../../../common/proto/common_pb.js');
goog.exportSymbol('proto.ticket.svc.workflow.InitialColumn', null, global);
goog.exportSymbol('proto.ticket.svc.workflow.WorkflowConfiguration', null, global);
goog.exportSymbol('proto.ticket.svc.workflow.WorkflowConfigurationResponse', null, global);
goog.exportSymbol('proto.ticket.svc.workflow.WorkflowConfigurations', null, global);
goog.exportSymbol('proto.ticket.svc.workflow.WorkflowId', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.workflow.WorkflowConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.workflow.WorkflowConfiguration.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.workflow.WorkflowConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.workflow.WorkflowConfiguration.displayName = 'proto.ticket.svc.workflow.WorkflowConfiguration';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.workflow.WorkflowConfiguration.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.workflow.WorkflowConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.workflow.WorkflowConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxitems: jspb.Message.getFieldWithDefault(msg, 3, 0),
    order: jspb.Message.getFieldWithDefault(msg, 4, 0),
    allowList: jspb.Message.getRepeatedField(msg, 5),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.workflow.WorkflowConfiguration}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.workflow.WorkflowConfiguration;
  return proto.ticket.svc.workflow.WorkflowConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.workflow.WorkflowConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.workflow.WorkflowConfiguration}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxitems(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrder(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAllowList(value);
      break;
    case 6:
      var value = /** @type {!proto.ticket.common.TicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.workflow.WorkflowConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.workflow.WorkflowConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxitems();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAllowList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 maxItems = 3;
 * @return {number}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.getMaxitems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.setMaxitems = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 order = 4;
 * @return {number}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.setOrder = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated uint32 allow = 5;
 * @return {!Array.<number>}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.getAllowList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.setAllowList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.addAllow = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.ticket.svc.workflow.WorkflowConfiguration.prototype.clearAllowList = function() {
  this.setAllowList([]);
};


/**
 * optional ticket.common.TicketStatus status = 6;
 * @return {!proto.ticket.common.TicketStatus}
 */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.getStatus = function() {
  return /** @type {!proto.ticket.common.TicketStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.ticket.common.TicketStatus} value */
proto.ticket.svc.workflow.WorkflowConfiguration.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.workflow.WorkflowId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.workflow.WorkflowId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.workflow.WorkflowId.displayName = 'proto.ticket.svc.workflow.WorkflowId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.workflow.WorkflowId.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.workflow.WorkflowId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.workflow.WorkflowId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowId.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflowid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.workflow.WorkflowId}
 */
proto.ticket.svc.workflow.WorkflowId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.workflow.WorkflowId;
  return proto.ticket.svc.workflow.WorkflowId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.workflow.WorkflowId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.workflow.WorkflowId}
 */
proto.ticket.svc.workflow.WorkflowId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkflowid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.workflow.WorkflowId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.workflow.WorkflowId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.workflow.WorkflowId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflowid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 workflowId = 1;
 * @return {number}
 */
proto.ticket.svc.workflow.WorkflowId.prototype.getWorkflowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.workflow.WorkflowId.prototype.setWorkflowid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.workflow.WorkflowConfigurations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.workflow.WorkflowConfigurations.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.workflow.WorkflowConfigurations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.workflow.WorkflowConfigurations.displayName = 'proto.ticket.svc.workflow.WorkflowConfigurations';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.workflow.WorkflowConfigurations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.workflow.WorkflowConfigurations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.workflow.WorkflowConfigurations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowConfigurations.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflowsList: jspb.Message.toObjectList(msg.getWorkflowsList(),
    proto.ticket.svc.workflow.WorkflowConfiguration.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.workflow.WorkflowConfigurations}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.workflow.WorkflowConfigurations;
  return proto.ticket.svc.workflow.WorkflowConfigurations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.workflow.WorkflowConfigurations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.workflow.WorkflowConfigurations}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.workflow.WorkflowConfiguration;
      reader.readMessage(value,proto.ticket.svc.workflow.WorkflowConfiguration.deserializeBinaryFromReader);
      msg.addWorkflows(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.workflow.WorkflowConfigurations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.workflow.WorkflowConfigurations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowConfigurations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.workflow.WorkflowConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WorkflowConfiguration workflows = 1;
 * @return {!Array.<!proto.ticket.svc.workflow.WorkflowConfiguration>}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.getWorkflowsList = function() {
  return /** @type{!Array.<!proto.ticket.svc.workflow.WorkflowConfiguration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.workflow.WorkflowConfiguration, 1));
};


/** @param {!Array.<!proto.ticket.svc.workflow.WorkflowConfiguration>} value */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.setWorkflowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.workflow.WorkflowConfiguration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.workflow.WorkflowConfiguration}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.addWorkflows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.workflow.WorkflowConfiguration, opt_index);
};


proto.ticket.svc.workflow.WorkflowConfigurations.prototype.clearWorkflowsList = function() {
  this.setWorkflowsList([]);
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.workflow.WorkflowConfigurations.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.workflow.WorkflowConfigurations.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.workflow.WorkflowConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.workflow.WorkflowConfigurationResponse.displayName = 'proto.ticket.svc.workflow.WorkflowConfigurationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.workflow.WorkflowConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.workflow.WorkflowConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflow: (f = msg.getWorkflow()) && proto.ticket.svc.workflow.WorkflowConfiguration.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.workflow.WorkflowConfigurationResponse}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.workflow.WorkflowConfigurationResponse;
  return proto.ticket.svc.workflow.WorkflowConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.workflow.WorkflowConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.workflow.WorkflowConfigurationResponse}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.workflow.WorkflowConfiguration;
      reader.readMessage(value,proto.ticket.svc.workflow.WorkflowConfiguration.deserializeBinaryFromReader);
      msg.setWorkflow(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.workflow.WorkflowConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.workflow.WorkflowConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.svc.workflow.WorkflowConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional WorkflowConfiguration workflow = 1;
 * @return {?proto.ticket.svc.workflow.WorkflowConfiguration}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.getWorkflow = function() {
  return /** @type{?proto.ticket.svc.workflow.WorkflowConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.ticket.svc.workflow.WorkflowConfiguration, 1));
};


/** @param {?proto.ticket.svc.workflow.WorkflowConfiguration|undefined} value */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.setWorkflow = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.clearWorkflow = function() {
  this.setWorkflow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.hasWorkflow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.workflow.WorkflowConfigurationResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.workflow.InitialColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.workflow.InitialColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.workflow.InitialColumn.displayName = 'proto.ticket.svc.workflow.InitialColumn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.workflow.InitialColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.workflow.InitialColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.workflow.InitialColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.InitialColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflowid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.workflow.InitialColumn}
 */
proto.ticket.svc.workflow.InitialColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.workflow.InitialColumn;
  return proto.ticket.svc.workflow.InitialColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.workflow.InitialColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.workflow.InitialColumn}
 */
proto.ticket.svc.workflow.InitialColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkflowid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.workflow.InitialColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.workflow.InitialColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.workflow.InitialColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.workflow.InitialColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflowid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 workflowId = 1;
 * @return {number}
 */
proto.ticket.svc.workflow.InitialColumn.prototype.getWorkflowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ticket.svc.workflow.InitialColumn.prototype.setWorkflowid = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.ticket.svc.workflow);
