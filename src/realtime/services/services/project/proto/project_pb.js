/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('../../../common/proto/common_pb.js');
goog.exportSymbol('proto.ticket.svc.project.Project', null, global);
goog.exportSymbol('proto.ticket.svc.project.ProjectResponse', null, global);
goog.exportSymbol('proto.ticket.svc.project.ProjectsResponse', null, global);
goog.exportSymbol('proto.ticket.svc.project.Shortcode', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.project.Shortcode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.project.Shortcode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.project.Shortcode.displayName = 'proto.ticket.svc.project.Shortcode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.project.Shortcode.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.project.Shortcode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.project.Shortcode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.Shortcode.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortcode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.project.Shortcode}
 */
proto.ticket.svc.project.Shortcode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.project.Shortcode;
  return proto.ticket.svc.project.Shortcode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.project.Shortcode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.project.Shortcode}
 */
proto.ticket.svc.project.Shortcode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.project.Shortcode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.project.Shortcode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.project.Shortcode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.Shortcode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string shortcode = 1;
 * @return {string}
 */
proto.ticket.svc.project.Shortcode.prototype.getShortcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.project.Shortcode.prototype.setShortcode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.project.Project = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.project.Project, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.project.Project.displayName = 'proto.ticket.svc.project.Project';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.project.Project.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.project.Project.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.project.Project} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.Project.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shortcode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.project.Project}
 */
proto.ticket.svc.project.Project.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.project.Project;
  return proto.ticket.svc.project.Project.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.project.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.project.Project}
 */
proto.ticket.svc.project.Project.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.project.Project.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.project.Project.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.project.Project} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.Project.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShortcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ticket.svc.project.Project.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ticket.svc.project.Project.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string shortcode = 2;
 * @return {string}
 */
proto.ticket.svc.project.Project.prototype.getShortcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ticket.svc.project.Project.prototype.setShortcode = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.project.ProjectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.svc.project.ProjectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.project.ProjectResponse.displayName = 'proto.ticket.svc.project.ProjectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.project.ProjectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.project.ProjectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.project.ProjectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.ProjectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: (f = msg.getProject()) && proto.ticket.svc.project.Project.toObject(includeInstance, f),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.project.ProjectResponse}
 */
proto.ticket.svc.project.ProjectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.project.ProjectResponse;
  return proto.ticket.svc.project.ProjectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.project.ProjectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.project.ProjectResponse}
 */
proto.ticket.svc.project.ProjectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.project.Project;
      reader.readMessage(value,proto.ticket.svc.project.Project.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.project.ProjectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.project.ProjectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.project.ProjectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.ProjectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.svc.project.Project.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Project project = 1;
 * @return {?proto.ticket.svc.project.Project}
 */
proto.ticket.svc.project.ProjectResponse.prototype.getProject = function() {
  return /** @type{?proto.ticket.svc.project.Project} */ (
    jspb.Message.getWrapperField(this, proto.ticket.svc.project.Project, 1));
};


/** @param {?proto.ticket.svc.project.Project|undefined} value */
proto.ticket.svc.project.ProjectResponse.prototype.setProject = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ticket.svc.project.ProjectResponse.prototype.clearProject = function() {
  this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.project.ProjectResponse.prototype.hasProject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.project.ProjectResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.project.ProjectResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.project.ProjectResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.project.ProjectResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.svc.project.ProjectsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.svc.project.ProjectsResponse.repeatedFields_, null);
};
goog.inherits(proto.ticket.svc.project.ProjectsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ticket.svc.project.ProjectsResponse.displayName = 'proto.ticket.svc.project.ProjectsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.svc.project.ProjectsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.svc.project.ProjectsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.svc.project.ProjectsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.svc.project.ProjectsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.ProjectsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectList: jspb.Message.toObjectList(msg.getProjectList(),
    proto.ticket.svc.project.Project.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.svc.project.ProjectsResponse}
 */
proto.ticket.svc.project.ProjectsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.svc.project.ProjectsResponse;
  return proto.ticket.svc.project.ProjectsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.svc.project.ProjectsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.svc.project.ProjectsResponse}
 */
proto.ticket.svc.project.ProjectsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.svc.project.Project;
      reader.readMessage(value,proto.ticket.svc.project.Project.deserializeBinaryFromReader);
      msg.addProject(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.svc.project.ProjectsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.svc.project.ProjectsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.svc.project.ProjectsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.svc.project.ProjectsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.svc.project.Project.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Project project = 1;
 * @return {!Array.<!proto.ticket.svc.project.Project>}
 */
proto.ticket.svc.project.ProjectsResponse.prototype.getProjectList = function() {
  return /** @type{!Array.<!proto.ticket.svc.project.Project>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.svc.project.Project, 1));
};


/** @param {!Array.<!proto.ticket.svc.project.Project>} value */
proto.ticket.svc.project.ProjectsResponse.prototype.setProjectList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.svc.project.Project=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.svc.project.Project}
 */
proto.ticket.svc.project.ProjectsResponse.prototype.addProject = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.svc.project.Project, opt_index);
};


proto.ticket.svc.project.ProjectsResponse.prototype.clearProjectList = function() {
  this.setProjectList([]);
};


/**
 * optional ticket.common.Error error = 2;
 * @return {?proto.ticket.common.Error}
 */
proto.ticket.svc.project.ProjectsResponse.prototype.getError = function() {
  return /** @type{?proto.ticket.common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/** @param {?proto.ticket.common.Error|undefined} value */
proto.ticket.svc.project.ProjectsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ticket.svc.project.ProjectsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ticket.svc.project.ProjectsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.ticket.svc.project);
