// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/app/services/sprint/proto/Sprint.proto

package ticket_svc_sprint

import (
	proto1 "app/common/proto"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SprintById struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SprintById) Reset()         { *m = SprintById{} }
func (m *SprintById) String() string { return proto.CompactTextString(m) }
func (*SprintById) ProtoMessage()    {}
func (*SprintById) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{0}
}

func (m *SprintById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintById.Unmarshal(m, b)
}
func (m *SprintById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintById.Marshal(b, m, deterministic)
}
func (m *SprintById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintById.Merge(m, src)
}
func (m *SprintById) XXX_Size() int {
	return xxx_messageInfo_SprintById.Size(m)
}
func (m *SprintById) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintById.DiscardUnknown(m)
}

var xxx_messageInfo_SprintById proto.InternalMessageInfo

func (m *SprintById) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SprintByProject struct {
	ProjectId            string   `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SprintByProject) Reset()         { *m = SprintByProject{} }
func (m *SprintByProject) String() string { return proto.CompactTextString(m) }
func (*SprintByProject) ProtoMessage()    {}
func (*SprintByProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{1}
}

func (m *SprintByProject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintByProject.Unmarshal(m, b)
}
func (m *SprintByProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintByProject.Marshal(b, m, deterministic)
}
func (m *SprintByProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintByProject.Merge(m, src)
}
func (m *SprintByProject) XXX_Size() int {
	return xxx_messageInfo_SprintByProject.Size(m)
}
func (m *SprintByProject) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintByProject.DiscardUnknown(m)
}

var xxx_messageInfo_SprintByProject proto.InternalMessageInfo

func (m *SprintByProject) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type Sprint struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Duration             int32    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration"`
	StartedAt            int64    `protobuf:"varint,4,opt,name=startedAt,proto3" json:"startedAt"`
	EndAt                int64    `protobuf:"varint,5,opt,name=endAt,proto3" json:"endAt"`
	ProjectCode          string   `protobuf:"bytes,6,opt,name=projectCode,proto3" json:"projectCode"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sprint) Reset()         { *m = Sprint{} }
func (m *Sprint) String() string { return proto.CompactTextString(m) }
func (*Sprint) ProtoMessage()    {}
func (*Sprint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{2}
}

func (m *Sprint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sprint.Unmarshal(m, b)
}
func (m *Sprint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sprint.Marshal(b, m, deterministic)
}
func (m *Sprint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sprint.Merge(m, src)
}
func (m *Sprint) XXX_Size() int {
	return xxx_messageInfo_Sprint.Size(m)
}
func (m *Sprint) XXX_DiscardUnknown() {
	xxx_messageInfo_Sprint.DiscardUnknown(m)
}

var xxx_messageInfo_Sprint proto.InternalMessageInfo

func (m *Sprint) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sprint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sprint) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Sprint) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *Sprint) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *Sprint) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

type SprintResponse struct {
	Sprint               *Sprint       `protobuf:"bytes,1,opt,name=sprint,proto3" json:"sprint"`
	Error                *proto1.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SprintResponse) Reset()         { *m = SprintResponse{} }
func (m *SprintResponse) String() string { return proto.CompactTextString(m) }
func (*SprintResponse) ProtoMessage()    {}
func (*SprintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{3}
}

func (m *SprintResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintResponse.Unmarshal(m, b)
}
func (m *SprintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintResponse.Marshal(b, m, deterministic)
}
func (m *SprintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintResponse.Merge(m, src)
}
func (m *SprintResponse) XXX_Size() int {
	return xxx_messageInfo_SprintResponse.Size(m)
}
func (m *SprintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SprintResponse proto.InternalMessageInfo

func (m *SprintResponse) GetSprint() *Sprint {
	if m != nil {
		return m.Sprint
	}
	return nil
}

func (m *SprintResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SprintsResponse struct {
	Sprints              []*Sprint     `protobuf:"bytes,1,rep,name=sprints,proto3" json:"sprints"`
	Error                *proto1.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SprintsResponse) Reset()         { *m = SprintsResponse{} }
func (m *SprintsResponse) String() string { return proto.CompactTextString(m) }
func (*SprintsResponse) ProtoMessage()    {}
func (*SprintsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{4}
}

func (m *SprintsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintsResponse.Unmarshal(m, b)
}
func (m *SprintsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintsResponse.Marshal(b, m, deterministic)
}
func (m *SprintsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintsResponse.Merge(m, src)
}
func (m *SprintsResponse) XXX_Size() int {
	return xxx_messageInfo_SprintsResponse.Size(m)
}
func (m *SprintsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SprintsResponse proto.InternalMessageInfo

func (m *SprintsResponse) GetSprints() []*Sprint {
	if m != nil {
		return m.Sprints
	}
	return nil
}

func (m *SprintsResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SprintComment struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	AuthorId             int32    `protobuf:"varint,2,opt,name=authorId,proto3" json:"authorId"`
	ProjectCode          string   `protobuf:"bytes,8,opt,name=projectCode,proto3" json:"projectCode"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message"`
	CreatedAt            int64    `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt"`
	SprintId             int32    `protobuf:"varint,6,opt,name=sprintId,proto3" json:"sprintId"`
	ResolvedId           int32    `protobuf:"varint,7,opt,name=resolvedId,proto3" json:"resolvedId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SprintComment) Reset()         { *m = SprintComment{} }
func (m *SprintComment) String() string { return proto.CompactTextString(m) }
func (*SprintComment) ProtoMessage()    {}
func (*SprintComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{5}
}

func (m *SprintComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintComment.Unmarshal(m, b)
}
func (m *SprintComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintComment.Marshal(b, m, deterministic)
}
func (m *SprintComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintComment.Merge(m, src)
}
func (m *SprintComment) XXX_Size() int {
	return xxx_messageInfo_SprintComment.Size(m)
}
func (m *SprintComment) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintComment.DiscardUnknown(m)
}

var xxx_messageInfo_SprintComment proto.InternalMessageInfo

func (m *SprintComment) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SprintComment) GetAuthorId() int32 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

func (m *SprintComment) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *SprintComment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SprintComment) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SprintComment) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SprintComment) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *SprintComment) GetResolvedId() int32 {
	if m != nil {
		return m.ResolvedId
	}
	return 0
}

type SprintCommentResponse struct {
	Comment              *SprintComment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment"`
	Error                *proto1.Error  `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SprintCommentResponse) Reset()         { *m = SprintCommentResponse{} }
func (m *SprintCommentResponse) String() string { return proto.CompactTextString(m) }
func (*SprintCommentResponse) ProtoMessage()    {}
func (*SprintCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{6}
}

func (m *SprintCommentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintCommentResponse.Unmarshal(m, b)
}
func (m *SprintCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintCommentResponse.Marshal(b, m, deterministic)
}
func (m *SprintCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintCommentResponse.Merge(m, src)
}
func (m *SprintCommentResponse) XXX_Size() int {
	return xxx_messageInfo_SprintCommentResponse.Size(m)
}
func (m *SprintCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SprintCommentResponse proto.InternalMessageInfo

func (m *SprintCommentResponse) GetComment() *SprintComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *SprintCommentResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SprintCommentsResponse struct {
	Comments             []*SprintComment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments"`
	Error                *proto1.Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SprintCommentsResponse) Reset()         { *m = SprintCommentsResponse{} }
func (m *SprintCommentsResponse) String() string { return proto.CompactTextString(m) }
func (*SprintCommentsResponse) ProtoMessage()    {}
func (*SprintCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{7}
}

func (m *SprintCommentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintCommentsResponse.Unmarshal(m, b)
}
func (m *SprintCommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintCommentsResponse.Marshal(b, m, deterministic)
}
func (m *SprintCommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintCommentsResponse.Merge(m, src)
}
func (m *SprintCommentsResponse) XXX_Size() int {
	return xxx_messageInfo_SprintCommentsResponse.Size(m)
}
func (m *SprintCommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintCommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SprintCommentsResponse proto.InternalMessageInfo

func (m *SprintCommentsResponse) GetComments() []*SprintComment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *SprintCommentsResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SprintCommentId struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SprintCommentId) Reset()         { *m = SprintCommentId{} }
func (m *SprintCommentId) String() string { return proto.CompactTextString(m) }
func (*SprintCommentId) ProtoMessage()    {}
func (*SprintCommentId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{8}
}

func (m *SprintCommentId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintCommentId.Unmarshal(m, b)
}
func (m *SprintCommentId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintCommentId.Marshal(b, m, deterministic)
}
func (m *SprintCommentId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintCommentId.Merge(m, src)
}
func (m *SprintCommentId) XXX_Size() int {
	return xxx_messageInfo_SprintCommentId.Size(m)
}
func (m *SprintCommentId) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintCommentId.DiscardUnknown(m)
}

var xxx_messageInfo_SprintCommentId proto.InternalMessageInfo

func (m *SprintCommentId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SprintCommentId) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type SprintCommentIdWithSprint struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project"`
	SprintId             int32    `protobuf:"varint,3,opt,name=sprintId,proto3" json:"sprintId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SprintCommentIdWithSprint) Reset()         { *m = SprintCommentIdWithSprint{} }
func (m *SprintCommentIdWithSprint) String() string { return proto.CompactTextString(m) }
func (*SprintCommentIdWithSprint) ProtoMessage()    {}
func (*SprintCommentIdWithSprint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{9}
}

func (m *SprintCommentIdWithSprint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintCommentIdWithSprint.Unmarshal(m, b)
}
func (m *SprintCommentIdWithSprint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintCommentIdWithSprint.Marshal(b, m, deterministic)
}
func (m *SprintCommentIdWithSprint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintCommentIdWithSprint.Merge(m, src)
}
func (m *SprintCommentIdWithSprint) XXX_Size() int {
	return xxx_messageInfo_SprintCommentIdWithSprint.Size(m)
}
func (m *SprintCommentIdWithSprint) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintCommentIdWithSprint.DiscardUnknown(m)
}

var xxx_messageInfo_SprintCommentIdWithSprint proto.InternalMessageInfo

func (m *SprintCommentIdWithSprint) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SprintCommentIdWithSprint) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *SprintCommentIdWithSprint) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

type SprintIdAndProject struct {
	SprintId             int32    `protobuf:"varint,1,opt,name=sprintId,proto3" json:"sprintId"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SprintIdAndProject) Reset()         { *m = SprintIdAndProject{} }
func (m *SprintIdAndProject) String() string { return proto.CompactTextString(m) }
func (*SprintIdAndProject) ProtoMessage()    {}
func (*SprintIdAndProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45fc98c3654e4ac, []int{10}
}

func (m *SprintIdAndProject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SprintIdAndProject.Unmarshal(m, b)
}
func (m *SprintIdAndProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SprintIdAndProject.Marshal(b, m, deterministic)
}
func (m *SprintIdAndProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SprintIdAndProject.Merge(m, src)
}
func (m *SprintIdAndProject) XXX_Size() int {
	return xxx_messageInfo_SprintIdAndProject.Size(m)
}
func (m *SprintIdAndProject) XXX_DiscardUnknown() {
	xxx_messageInfo_SprintIdAndProject.DiscardUnknown(m)
}

var xxx_messageInfo_SprintIdAndProject proto.InternalMessageInfo

func (m *SprintIdAndProject) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *SprintIdAndProject) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func init() {
	proto.RegisterType((*SprintById)(nil), "ticket.svc.sprint.SprintById")
	proto.RegisterType((*SprintByProject)(nil), "ticket.svc.sprint.SprintByProject")
	proto.RegisterType((*Sprint)(nil), "ticket.svc.sprint.Sprint")
	proto.RegisterType((*SprintResponse)(nil), "ticket.svc.sprint.SprintResponse")
	proto.RegisterType((*SprintsResponse)(nil), "ticket.svc.sprint.SprintsResponse")
	proto.RegisterType((*SprintComment)(nil), "ticket.svc.sprint.SprintComment")
	proto.RegisterType((*SprintCommentResponse)(nil), "ticket.svc.sprint.SprintCommentResponse")
	proto.RegisterType((*SprintCommentsResponse)(nil), "ticket.svc.sprint.SprintCommentsResponse")
	proto.RegisterType((*SprintCommentId)(nil), "ticket.svc.sprint.SprintCommentId")
	proto.RegisterType((*SprintCommentIdWithSprint)(nil), "ticket.svc.sprint.SprintCommentIdWithSprint")
	proto.RegisterType((*SprintIdAndProject)(nil), "ticket.svc.sprint.SprintIdAndProject")
}

func init() {
	proto.RegisterFile("src/app/services/sprint/proto/Sprint.proto", fileDescriptor_b45fc98c3654e4ac)
}

var fileDescriptor_b45fc98c3654e4ac = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x25, 0xdd, 0xee, 0xd7, 0xdd, 0x7e, 0xe0, 0xd0, 0x4a, 0x1a, 0xaa, 0xac, 0x01, 0xa1, 0x16,
	0xd9, 0xc5, 0xf6, 0x4d, 0x7d, 0x59, 0xab, 0xae, 0xa9, 0x2f, 0x25, 0xa5, 0xd8, 0x07, 0x41, 0x63,
	0xe6, 0x62, 0xa3, 0xdd, 0x4c, 0x98, 0x99, 0x2e, 0xf4, 0x49, 0xf0, 0x87, 0xf8, 0xd3, 0x7c, 0xf3,
	0x7f, 0x48, 0xe6, 0x23, 0xe9, 0x6e, 0x9b, 0xa6, 0x8b, 0xf8, 0x36, 0x77, 0xe6, 0x9e, 0x73, 0x6f,
	0xee, 0x99, 0x33, 0x04, 0x76, 0x05, 0x8f, 0x87, 0x51, 0x96, 0x0d, 0x05, 0xf2, 0x69, 0x12, 0xa3,
	0x18, 0x8a, 0x8c, 0x27, 0xa9, 0x1c, 0x66, 0x9c, 0x49, 0x36, 0x3c, 0x56, 0xc1, 0x40, 0x05, 0xe4,
	0x9e, 0x4c, 0xe2, 0xef, 0x28, 0x07, 0x62, 0x1a, 0x0f, 0x74, 0x96, 0xb7, 0x12, 0xb3, 0xc9, 0x84,
	0xa5, 0x3a, 0xc1, 0xdf, 0x06, 0xd0, 0x80, 0x57, 0x97, 0x01, 0x25, 0x6b, 0xb0, 0x94, 0x50, 0xd7,
	0xe9, 0x3b, 0x3b, 0xcd, 0x70, 0x29, 0xa1, 0xfe, 0x10, 0xd6, 0xed, 0xe9, 0x11, 0x67, 0xdf, 0x30,
	0x96, 0x64, 0x1b, 0xba, 0x99, 0x5e, 0x06, 0x3a, 0xb3, 0x1b, 0x96, 0x1b, 0xfe, 0x2f, 0x07, 0x5a,
	0x1a, 0x31, 0xcf, 0x45, 0x08, 0x2c, 0xa7, 0xd1, 0x04, 0xdd, 0x25, 0x85, 0x51, 0x6b, 0xe2, 0x41,
	0x87, 0x5e, 0xf0, 0x48, 0x26, 0x2c, 0x75, 0x1b, 0x2a, 0xb3, 0x88, 0xf3, 0x42, 0x42, 0x46, 0x5c,
	0x22, 0x1d, 0x49, 0x77, 0xb9, 0xef, 0xec, 0x34, 0xc2, 0x72, 0x83, 0x6c, 0x40, 0x13, 0xd3, 0xfc,
	0xa4, 0xa9, 0x4e, 0x74, 0x40, 0xfa, 0xd0, 0x33, 0xbd, 0x1c, 0x30, 0x8a, 0x6e, 0x4b, 0x95, 0xba,
	0xba, 0xe5, 0x33, 0x58, 0xd3, 0xfd, 0x85, 0x28, 0x32, 0x96, 0x0a, 0x24, 0xcf, 0xa0, 0xa5, 0x27,
	0xa3, 0x7a, 0xed, 0xed, 0x6d, 0x0d, 0xae, 0xcd, 0x6c, 0x60, 0x20, 0x26, 0x91, 0xec, 0x42, 0x13,
	0x39, 0x67, 0x5c, 0x7d, 0x4b, 0x6f, 0x6f, 0xc3, 0x22, 0xcc, 0x64, 0xdf, 0xe4, 0x67, 0xa1, 0x4e,
	0xf1, 0xb9, 0x1d, 0xa1, 0x28, 0x2a, 0xee, 0x43, 0x5b, 0x13, 0x09, 0xd7, 0xe9, 0x37, 0x6e, 0x2f,
	0x69, 0x33, 0x17, 0xaa, 0xf9, 0xc7, 0x81, 0x55, 0x8d, 0x3f, 0x60, 0x93, 0x09, 0xde, 0x20, 0x86,
	0x07, 0x9d, 0xe8, 0x42, 0x9e, 0x31, 0x1e, 0x50, 0x45, 0xd8, 0x0c, 0x8b, 0x78, 0x7e, 0x88, 0x9d,
	0x6b, 0x43, 0xcc, 0xa5, 0x94, 0x97, 0x19, 0x2a, 0xc9, 0xba, 0xa1, 0x5a, 0x13, 0x17, 0xda, 0x13,
	0x14, 0x22, 0xfa, 0x8a, 0x4a, 0xac, 0x6e, 0x68, 0xc3, 0x5c, 0xc8, 0x98, 0x63, 0xa4, 0x85, 0xd4,
	0x72, 0x95, 0x1b, 0x79, 0x27, 0xfa, 0x13, 0x03, 0xaa, 0xf4, 0x6a, 0x86, 0x45, 0x4c, 0x1e, 0x02,
	0x70, 0x14, 0xec, 0x7c, 0x8a, 0x34, 0xa0, 0x6e, 0x5b, 0x9d, 0x5e, 0xd9, 0xf1, 0x7f, 0xc0, 0xe6,
	0xcc, 0x67, 0x16, 0x13, 0x7e, 0x0e, 0xed, 0x58, 0x6f, 0x19, 0x51, 0xfb, 0x95, 0x13, 0xb6, 0x50,
	0x0b, 0x58, 0x68, 0xd0, 0x3f, 0x1d, 0xb8, 0x3f, 0x43, 0x53, 0x8a, 0xfc, 0x12, 0x3a, 0x86, 0xd1,
	0xaa, 0x5c, 0xdf, 0x43, 0x81, 0x58, 0xa8, 0x89, 0x17, 0xf6, 0x86, 0x19, 0x9a, 0xeb, 0x3e, 0xce,
	0xc5, 0x31, 0xfa, 0x19, 0xfb, 0xd9, 0xd0, 0x8f, 0x60, 0x6b, 0x0e, 0xfc, 0x21, 0x91, 0x67, 0x15,
	0x16, 0xae, 0xa4, 0x99, 0x51, 0xb1, 0x31, 0xab, 0xa2, 0x7f, 0x08, 0xe4, 0xd8, 0xac, 0x47, 0x29,
	0x3d, 0xba, 0x01, 0xe1, 0xcc, 0xe9, 0x5e, 0x59, 0x67, 0xef, 0x77, 0x0b, 0xda, 0xc6, 0x4e, 0xe4,
	0x14, 0xd6, 0xc7, 0x28, 0x47, 0xb1, 0x4c, 0xa6, 0x68, 0x1a, 0xf6, 0x2b, 0x47, 0x5c, 0x3c, 0x60,
	0xde, 0xa3, 0x6a, 0xb3, 0x59, 0xed, 0x3e, 0x02, 0x19, 0xa3, 0x7c, 0x97, 0x08, 0xc9, 0x78, 0x12,
	0xdb, 0x7a, 0x77, 0x21, 0xaf, 0xce, 0x29, 0x6f, 0xc6, 0x7b, 0x68, 0x8f, 0x51, 0xbf, 0xb7, 0x0f,
	0x6e, 0xa1, 0x0c, 0xe8, 0x5d, 0x5a, 0x7d, 0x0b, 0xad, 0x03, 0xe5, 0x25, 0x52, 0xfd, 0x88, 0xdc,
	0x91, 0xe7, 0x24, 0xa3, 0xff, 0xce, 0xf3, 0x09, 0x7a, 0x63, 0x2c, 0xdc, 0x40, 0x1e, 0x57, 0x22,
	0xae, 0x5e, 0x06, 0xef, 0x49, 0x9d, 0x35, 0xca, 0xe9, 0x7d, 0x86, 0x95, 0xa3, 0x48, 0xfc, 0xcf,
	0x0a, 0xa7, 0x00, 0x23, 0x4a, 0xed, 0xcb, 0x59, 0xeb, 0x5a, 0x6f, 0xa7, 0xd6, 0xd7, 0x96, 0xf9,
	0x10, 0x56, 0x5f, 0xe3, 0x39, 0x4a, 0xb4, 0xe4, 0x7e, 0x1d, 0x34, 0xa0, 0xde, 0xe6, 0x9c, 0xf7,
	0x8f, 0x65, 0x24, 0x2f, 0x04, 0x39, 0x81, 0xb5, 0x50, 0xbf, 0x84, 0x96, 0xec, 0x69, 0x3d, 0x59,
	0xe9, 0xed, 0x0a, 0xda, 0x2f, 0x2d, 0xf5, 0x5b, 0xb0, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0x8c, 0xda, 0xfd, 0x65, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SprintsClient is the client API for Sprints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SprintsClient interface {
	GetActiveSprint(ctx context.Context, in *SprintByProject, opts ...grpc.CallOption) (*SprintResponse, error)
	GetHistoricSprints(ctx context.Context, in *SprintByProject, opts ...grpc.CallOption) (*SprintsResponse, error)
	GetById(ctx context.Context, in *SprintById, opts ...grpc.CallOption) (*SprintResponse, error)
	Create(ctx context.Context, in *Sprint, opts ...grpc.CallOption) (*SprintResponse, error)
	Update(ctx context.Context, in *Sprint, opts ...grpc.CallOption) (*SprintResponse, error)
	GetComments(ctx context.Context, in *SprintIdAndProject, opts ...grpc.CallOption) (*SprintCommentsResponse, error)
	PastComments(ctx context.Context, in *SprintIdAndProject, opts ...grpc.CallOption) (*SprintCommentsResponse, error)
	AddComment(ctx context.Context, in *SprintComment, opts ...grpc.CallOption) (*SprintCommentResponse, error)
	DeleteComment(ctx context.Context, in *SprintCommentId, opts ...grpc.CallOption) (*proto1.Status, error)
	ResolveComment(ctx context.Context, in *SprintCommentIdWithSprint, opts ...grpc.CallOption) (*proto1.Status, error)
}

type sprintsClient struct {
	cc *grpc.ClientConn
}

func NewSprintsClient(cc *grpc.ClientConn) SprintsClient {
	return &sprintsClient{cc}
}

func (c *sprintsClient) GetActiveSprint(ctx context.Context, in *SprintByProject, opts ...grpc.CallOption) (*SprintResponse, error) {
	out := new(SprintResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/GetActiveSprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) GetHistoricSprints(ctx context.Context, in *SprintByProject, opts ...grpc.CallOption) (*SprintsResponse, error) {
	out := new(SprintsResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/GetHistoricSprints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) GetById(ctx context.Context, in *SprintById, opts ...grpc.CallOption) (*SprintResponse, error) {
	out := new(SprintResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) Create(ctx context.Context, in *Sprint, opts ...grpc.CallOption) (*SprintResponse, error) {
	out := new(SprintResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) Update(ctx context.Context, in *Sprint, opts ...grpc.CallOption) (*SprintResponse, error) {
	out := new(SprintResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) GetComments(ctx context.Context, in *SprintIdAndProject, opts ...grpc.CallOption) (*SprintCommentsResponse, error) {
	out := new(SprintCommentsResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) PastComments(ctx context.Context, in *SprintIdAndProject, opts ...grpc.CallOption) (*SprintCommentsResponse, error) {
	out := new(SprintCommentsResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/PastComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) AddComment(ctx context.Context, in *SprintComment, opts ...grpc.CallOption) (*SprintCommentResponse, error) {
	out := new(SprintCommentResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) DeleteComment(ctx context.Context, in *SprintCommentId, opts ...grpc.CallOption) (*proto1.Status, error) {
	out := new(proto1.Status)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) ResolveComment(ctx context.Context, in *SprintCommentIdWithSprint, opts ...grpc.CallOption) (*proto1.Status, error) {
	out := new(proto1.Status)
	err := c.cc.Invoke(ctx, "/ticket.svc.sprint.Sprints/ResolveComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SprintsServer is the server API for Sprints service.
type SprintsServer interface {
	GetActiveSprint(context.Context, *SprintByProject) (*SprintResponse, error)
	GetHistoricSprints(context.Context, *SprintByProject) (*SprintsResponse, error)
	GetById(context.Context, *SprintById) (*SprintResponse, error)
	Create(context.Context, *Sprint) (*SprintResponse, error)
	Update(context.Context, *Sprint) (*SprintResponse, error)
	GetComments(context.Context, *SprintIdAndProject) (*SprintCommentsResponse, error)
	PastComments(context.Context, *SprintIdAndProject) (*SprintCommentsResponse, error)
	AddComment(context.Context, *SprintComment) (*SprintCommentResponse, error)
	DeleteComment(context.Context, *SprintCommentId) (*proto1.Status, error)
	ResolveComment(context.Context, *SprintCommentIdWithSprint) (*proto1.Status, error)
}

func RegisterSprintsServer(s *grpc.Server, srv SprintsServer) {
	s.RegisterService(&_Sprints_serviceDesc, srv)
}

func _Sprints_GetActiveSprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintByProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).GetActiveSprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/GetActiveSprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).GetActiveSprint(ctx, req.(*SprintByProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_GetHistoricSprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintByProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).GetHistoricSprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/GetHistoricSprints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).GetHistoricSprints(ctx, req.(*SprintByProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).GetById(ctx, req.(*SprintById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).Create(ctx, req.(*Sprint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).Update(ctx, req.(*Sprint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintIdAndProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).GetComments(ctx, req.(*SprintIdAndProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_PastComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintIdAndProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).PastComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/PastComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).PastComments(ctx, req.(*SprintIdAndProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).AddComment(ctx, req.(*SprintComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintCommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).DeleteComment(ctx, req.(*SprintCommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_ResolveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintCommentIdWithSprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).ResolveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.sprint.Sprints/ResolveComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).ResolveComment(ctx, req.(*SprintCommentIdWithSprint))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sprints_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.svc.sprint.Sprints",
	HandlerType: (*SprintsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveSprint",
			Handler:    _Sprints_GetActiveSprint_Handler,
		},
		{
			MethodName: "GetHistoricSprints",
			Handler:    _Sprints_GetHistoricSprints_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Sprints_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Sprints_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Sprints_Update_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Sprints_GetComments_Handler,
		},
		{
			MethodName: "PastComments",
			Handler:    _Sprints_PastComments_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _Sprints_AddComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Sprints_DeleteComment_Handler,
		},
		{
			MethodName: "ResolveComment",
			Handler:    _Sprints_ResolveComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/app/services/sprint/proto/Sprint.proto",
}
