// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/app/services/ticket/proto/ticket.proto

package ticket_svc_ticket

import (
	proto1 "app/common/proto"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LocationType int32

const (
	LocationType_backlog LocationType = 0
	LocationType_sprint  LocationType = 1
	LocationType_pending LocationType = 2
)

var LocationType_name = map[int32]string{
	0: "backlog",
	1: "sprint",
	2: "pending",
}

var LocationType_value = map[string]int32{
	"backlog": 0,
	"sprint":  1,
	"pending": 2,
}

func (x LocationType) String() string {
	return proto.EnumName(LocationType_name, int32(x))
}

func (LocationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{0}
}

type GetAllRequest struct {
	ProjectSC            string                `protobuf:"bytes,1,opt,name=projectSC,proto3" json:"projectSC"`
	LocationType         LocationType          `protobuf:"varint,2,opt,name=locationType,proto3,enum=ticket.svc.ticket.LocationType" json:"locationType"`
	Status               []proto1.TicketStatus `protobuf:"varint,3,rep,packed,name=status,proto3,enum=ticket.common.TicketStatus" json:"status"`
	SprintId             int32                 `protobuf:"varint,4,opt,name=sprintId,proto3" json:"sprintId"`
	WorkflowId           int32                 `protobuf:"varint,5,opt,name=workflowId,proto3" json:"workflowId"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetAllRequest) Reset()         { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()    {}
func (*GetAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{0}
}

func (m *GetAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllRequest.Unmarshal(m, b)
}
func (m *GetAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllRequest.Marshal(b, m, deterministic)
}
func (m *GetAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRequest.Merge(m, src)
}
func (m *GetAllRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllRequest.Size(m)
}
func (m *GetAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRequest proto.InternalMessageInfo

func (m *GetAllRequest) GetProjectSC() string {
	if m != nil {
		return m.ProjectSC
	}
	return ""
}

func (m *GetAllRequest) GetLocationType() LocationType {
	if m != nil {
		return m.LocationType
	}
	return LocationType_backlog
}

func (m *GetAllRequest) GetStatus() []proto1.TicketStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetAllRequest) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *GetAllRequest) GetWorkflowId() int32 {
	if m != nil {
		return m.WorkflowId
	}
	return 0
}

type GetRequest struct {
	ProjectSC            string   `protobuf:"bytes,1,opt,name=projectSC,proto3" json:"projectSC"`
	TicketId             int32    `protobuf:"varint,2,opt,name=ticketId,proto3" json:"ticketId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{1}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetProjectSC() string {
	if m != nil {
		return m.ProjectSC
	}
	return ""
}

func (m *GetRequest) GetTicketId() int32 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

type TicketsListResponse struct {
	Tickets              []*Ticket     `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets"`
	Error                *proto1.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TicketsListResponse) Reset()         { *m = TicketsListResponse{} }
func (m *TicketsListResponse) String() string { return proto.CompactTextString(m) }
func (*TicketsListResponse) ProtoMessage()    {}
func (*TicketsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{2}
}

func (m *TicketsListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketsListResponse.Unmarshal(m, b)
}
func (m *TicketsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketsListResponse.Marshal(b, m, deterministic)
}
func (m *TicketsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketsListResponse.Merge(m, src)
}
func (m *TicketsListResponse) XXX_Size() int {
	return xxx_messageInfo_TicketsListResponse.Size(m)
}
func (m *TicketsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TicketsListResponse proto.InternalMessageInfo

func (m *TicketsListResponse) GetTickets() []*Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *TicketsListResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type TicketResponse struct {
	Ticket               *Ticket       `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket"`
	Error                *proto1.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TicketResponse) Reset()         { *m = TicketResponse{} }
func (m *TicketResponse) String() string { return proto.CompactTextString(m) }
func (*TicketResponse) ProtoMessage()    {}
func (*TicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{3}
}

func (m *TicketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketResponse.Unmarshal(m, b)
}
func (m *TicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketResponse.Marshal(b, m, deterministic)
}
func (m *TicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketResponse.Merge(m, src)
}
func (m *TicketResponse) XXX_Size() int {
	return xxx_messageInfo_TicketResponse.Size(m)
}
func (m *TicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TicketResponse proto.InternalMessageInfo

func (m *TicketResponse) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *TicketResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Ticket struct {
	Id                   int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectCode          string              `protobuf:"bytes,9,opt,name=projectCode,proto3" json:"projectCode"`
	Title                string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Body                 string              `protobuf:"bytes,3,opt,name=body,proto3" json:"body"`
	Weight               int32               `protobuf:"varint,14,opt,name=weight,proto3" json:"weight"`
	LocationType         LocationType        `protobuf:"varint,4,opt,name=locationType,proto3,enum=ticket.svc.ticket.LocationType" json:"locationType"`
	SprintId             int32               `protobuf:"varint,5,opt,name=sprintId,proto3" json:"sprintId"`
	PreviousTicket       int32               `protobuf:"varint,6,opt,name=previousTicket,proto3" json:"previousTicket"`
	WorkflowId           int32               `protobuf:"varint,12,opt,name=workflowId,proto3" json:"workflowId"`
	WorkflowPosition     int32               `protobuf:"varint,13,opt,name=workflowPosition,proto3" json:"workflowPosition"`
	CreatorUserId        int32               `protobuf:"varint,10,opt,name=creatorUserId,proto3" json:"creatorUserId"`
	AssigneeUserId       int32               `protobuf:"varint,11,opt,name=assigneeUserId,proto3" json:"assigneeUserId"`
	CreatedAt            int64               `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt            int64               `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt"`
	Category             string              `protobuf:"bytes,16,opt,name=category,proto3" json:"category"`
	Status               proto1.TicketStatus `protobuf:"varint,15,opt,name=status,proto3,enum=ticket.common.TicketStatus" json:"status"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{4}
}

func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticket.Unmarshal(m, b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
}
func (m *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(m, src)
}
func (m *Ticket) XXX_Size() int {
	return xxx_messageInfo_Ticket.Size(m)
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ticket) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *Ticket) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Ticket) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Ticket) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Ticket) GetLocationType() LocationType {
	if m != nil {
		return m.LocationType
	}
	return LocationType_backlog
}

func (m *Ticket) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *Ticket) GetPreviousTicket() int32 {
	if m != nil {
		return m.PreviousTicket
	}
	return 0
}

func (m *Ticket) GetWorkflowId() int32 {
	if m != nil {
		return m.WorkflowId
	}
	return 0
}

func (m *Ticket) GetWorkflowPosition() int32 {
	if m != nil {
		return m.WorkflowPosition
	}
	return 0
}

func (m *Ticket) GetCreatorUserId() int32 {
	if m != nil {
		return m.CreatorUserId
	}
	return 0
}

func (m *Ticket) GetAssigneeUserId() int32 {
	if m != nil {
		return m.AssigneeUserId
	}
	return 0
}

func (m *Ticket) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Ticket) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Ticket) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Ticket) GetStatus() proto1.TicketStatus {
	if m != nil {
		return m.Status
	}
	return proto1.TicketStatus_Open
}

type TicketComment struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectCode          string   `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode"`
	TicketId             int32    `protobuf:"varint,3,opt,name=ticketId,proto3" json:"ticketId"`
	Body                 string   `protobuf:"bytes,4,opt,name=body,proto3" json:"body"`
	UserId               int32    `protobuf:"varint,5,opt,name=userId,proto3" json:"userId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TicketComment) Reset()         { *m = TicketComment{} }
func (m *TicketComment) String() string { return proto.CompactTextString(m) }
func (*TicketComment) ProtoMessage()    {}
func (*TicketComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{5}
}

func (m *TicketComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketComment.Unmarshal(m, b)
}
func (m *TicketComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketComment.Marshal(b, m, deterministic)
}
func (m *TicketComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketComment.Merge(m, src)
}
func (m *TicketComment) XXX_Size() int {
	return xxx_messageInfo_TicketComment.Size(m)
}
func (m *TicketComment) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketComment.DiscardUnknown(m)
}

var xxx_messageInfo_TicketComment proto.InternalMessageInfo

func (m *TicketComment) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TicketComment) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *TicketComment) GetTicketId() int32 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *TicketComment) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *TicketComment) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CommentResponse struct {
	Comment              *TicketComment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment"`
	Error                *proto1.Error  `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CommentResponse) Reset()         { *m = CommentResponse{} }
func (m *CommentResponse) String() string { return proto.CompactTextString(m) }
func (*CommentResponse) ProtoMessage()    {}
func (*CommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{6}
}

func (m *CommentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentResponse.Unmarshal(m, b)
}
func (m *CommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentResponse.Marshal(b, m, deterministic)
}
func (m *CommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentResponse.Merge(m, src)
}
func (m *CommentResponse) XXX_Size() int {
	return xxx_messageInfo_CommentResponse.Size(m)
}
func (m *CommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommentResponse proto.InternalMessageInfo

func (m *CommentResponse) GetComment() *TicketComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *CommentResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type MoveRequest struct {
	ProjectCode          string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode"`
	TicketId             int32    `protobuf:"varint,2,opt,name=ticketId,proto3" json:"ticketId"`
	PreviousTicket       int32    `protobuf:"varint,3,opt,name=previousTicket,proto3" json:"previousTicket"`
	SprintId             int32    `protobuf:"varint,4,opt,name=sprintId,proto3" json:"sprintId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveRequest) Reset()         { *m = MoveRequest{} }
func (m *MoveRequest) String() string { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()    {}
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{7}
}

func (m *MoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveRequest.Unmarshal(m, b)
}
func (m *MoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveRequest.Marshal(b, m, deterministic)
}
func (m *MoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveRequest.Merge(m, src)
}
func (m *MoveRequest) XXX_Size() int {
	return xxx_messageInfo_MoveRequest.Size(m)
}
func (m *MoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveRequest proto.InternalMessageInfo

func (m *MoveRequest) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *MoveRequest) GetTicketId() int32 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *MoveRequest) GetPreviousTicket() int32 {
	if m != nil {
		return m.PreviousTicket
	}
	return 0
}

func (m *MoveRequest) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

type MoveWithinSprintRequest struct {
	ProjectCode          string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode"`
	TicketId             int32    `protobuf:"varint,2,opt,name=ticketId,proto3" json:"ticketId"`
	WorkflowId           int32    `protobuf:"varint,3,opt,name=workflowId,proto3" json:"workflowId"`
	Order                int32    `protobuf:"varint,4,opt,name=order,proto3" json:"order"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveWithinSprintRequest) Reset()         { *m = MoveWithinSprintRequest{} }
func (m *MoveWithinSprintRequest) String() string { return proto.CompactTextString(m) }
func (*MoveWithinSprintRequest) ProtoMessage()    {}
func (*MoveWithinSprintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{8}
}

func (m *MoveWithinSprintRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveWithinSprintRequest.Unmarshal(m, b)
}
func (m *MoveWithinSprintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveWithinSprintRequest.Marshal(b, m, deterministic)
}
func (m *MoveWithinSprintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveWithinSprintRequest.Merge(m, src)
}
func (m *MoveWithinSprintRequest) XXX_Size() int {
	return xxx_messageInfo_MoveWithinSprintRequest.Size(m)
}
func (m *MoveWithinSprintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveWithinSprintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveWithinSprintRequest proto.InternalMessageInfo

func (m *MoveWithinSprintRequest) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *MoveWithinSprintRequest) GetTicketId() int32 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *MoveWithinSprintRequest) GetWorkflowId() int32 {
	if m != nil {
		return m.WorkflowId
	}
	return 0
}

func (m *MoveWithinSprintRequest) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

type CommentsListResponse struct {
	Comments             []*TicketComment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments"`
	Error                *proto1.Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CommentsListResponse) Reset()         { *m = CommentsListResponse{} }
func (m *CommentsListResponse) String() string { return proto.CompactTextString(m) }
func (*CommentsListResponse) ProtoMessage()    {}
func (*CommentsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{9}
}

func (m *CommentsListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentsListResponse.Unmarshal(m, b)
}
func (m *CommentsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentsListResponse.Marshal(b, m, deterministic)
}
func (m *CommentsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentsListResponse.Merge(m, src)
}
func (m *CommentsListResponse) XXX_Size() int {
	return xxx_messageInfo_CommentsListResponse.Size(m)
}
func (m *CommentsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommentsListResponse proto.InternalMessageInfo

func (m *CommentsListResponse) GetComments() []*TicketComment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *CommentsListResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Category struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{10}
}

func (m *Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Category.Unmarshal(m, b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Category.Marshal(b, m, deterministic)
}
func (m *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(m, src)
}
func (m *Category) XXX_Size() int {
	return xxx_messageInfo_Category.Size(m)
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Category) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Categories struct {
	Categories           []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Categories) Reset()         { *m = Categories{} }
func (m *Categories) String() string { return proto.CompactTextString(m) }
func (*Categories) ProtoMessage()    {}
func (*Categories) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c265015f3863b52, []int{11}
}

func (m *Categories) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Categories.Unmarshal(m, b)
}
func (m *Categories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Categories.Marshal(b, m, deterministic)
}
func (m *Categories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Categories.Merge(m, src)
}
func (m *Categories) XXX_Size() int {
	return xxx_messageInfo_Categories.Size(m)
}
func (m *Categories) XXX_DiscardUnknown() {
	xxx_messageInfo_Categories.DiscardUnknown(m)
}

var xxx_messageInfo_Categories proto.InternalMessageInfo

func (m *Categories) GetCategories() []*Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

func init() {
	proto.RegisterEnum("ticket.svc.ticket.LocationType", LocationType_name, LocationType_value)
	proto.RegisterType((*GetAllRequest)(nil), "ticket.svc.ticket.GetAllRequest")
	proto.RegisterType((*GetRequest)(nil), "ticket.svc.ticket.GetRequest")
	proto.RegisterType((*TicketsListResponse)(nil), "ticket.svc.ticket.TicketsListResponse")
	proto.RegisterType((*TicketResponse)(nil), "ticket.svc.ticket.TicketResponse")
	proto.RegisterType((*Ticket)(nil), "ticket.svc.ticket.Ticket")
	proto.RegisterType((*TicketComment)(nil), "ticket.svc.ticket.TicketComment")
	proto.RegisterType((*CommentResponse)(nil), "ticket.svc.ticket.CommentResponse")
	proto.RegisterType((*MoveRequest)(nil), "ticket.svc.ticket.MoveRequest")
	proto.RegisterType((*MoveWithinSprintRequest)(nil), "ticket.svc.ticket.MoveWithinSprintRequest")
	proto.RegisterType((*CommentsListResponse)(nil), "ticket.svc.ticket.CommentsListResponse")
	proto.RegisterType((*Category)(nil), "ticket.svc.ticket.Category")
	proto.RegisterType((*Categories)(nil), "ticket.svc.ticket.Categories")
}

func init() {
	proto.RegisterFile("src/app/services/ticket/proto/ticket.proto", fileDescriptor_8c265015f3863b52)
}

var fileDescriptor_8c265015f3863b52 = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0x71, 0xec, 0x64, 0x5f, 0x36, 0x69, 0x18, 0x16, 0x30, 0x29, 0x2d, 0xc6, 0x42, 0x25,
	0xca, 0x61, 0x57, 0xa4, 0x3d, 0xf1, 0xe7, 0x50, 0x45, 0x34, 0x8a, 0x54, 0xa4, 0xca, 0xdb, 0x88,
	0xb3, 0xd7, 0x1e, 0xd2, 0x61, 0x13, 0x8f, 0x99, 0x99, 0x64, 0x95, 0x1b, 0x57, 0x0e, 0x88, 0x2f,
	0xc2, 0x47, 0xe1, 0x5b, 0xf0, 0x45, 0x90, 0x67, 0xc6, 0x5e, 0xdb, 0xb1, 0x37, 0xbb, 0xc0, 0xcd,
	0xef, 0xcd, 0xfb, 0x3f, 0xbf, 0xdf, 0x1b, 0xc3, 0x84, 0xb3, 0xf0, 0x22, 0x48, 0x92, 0x0b, 0x8e,
	0xd9, 0x8e, 0x84, 0x98, 0x5f, 0x08, 0x12, 0x5e, 0x63, 0x71, 0x91, 0x30, 0x2a, 0xa8, 0x16, 0xce,
	0xa5, 0x80, 0xde, 0xd7, 0x12, 0xdf, 0x85, 0xe7, 0xea, 0x73, 0x74, 0x1a, 0xd2, 0xcd, 0x86, 0xc6,
	0xca, 0xc0, 0xfb, 0xdb, 0x80, 0xfe, 0x1c, 0x8b, 0x97, 0xeb, 0xb5, 0x8f, 0x7f, 0xd9, 0x62, 0x2e,
	0xd0, 0xa7, 0x70, 0x92, 0x30, 0xfa, 0x33, 0x0e, 0xc5, 0xe5, 0xcc, 0x31, 0x5c, 0x63, 0x7c, 0xe2,
	0xdf, 0x2a, 0xd0, 0x0c, 0x4e, 0xd7, 0x34, 0x0c, 0x04, 0xa1, 0xf1, 0xdb, 0x7d, 0x82, 0x9d, 0x96,
	0x6b, 0x8c, 0x07, 0xd3, 0xcf, 0xce, 0x0f, 0xf2, 0x9c, 0xbf, 0x2e, 0x98, 0xf9, 0x25, 0x27, 0xf4,
	0x1c, 0x6c, 0x2e, 0x02, 0xb1, 0xe5, 0x8e, 0xe9, 0x9a, 0xe3, 0xc1, 0xf4, 0x71, 0xe6, 0xa3, 0x4b,
	0x7b, 0x2b, 0xa5, 0x4b, 0x69, 0xe2, 0x6b, 0x53, 0x34, 0x82, 0x2e, 0x4f, 0x18, 0x89, 0xc5, 0x22,
	0x72, 0xda, 0xae, 0x31, 0xb6, 0xfc, 0x5c, 0x46, 0x4f, 0x01, 0x6e, 0x28, 0xbb, 0xfe, 0x69, 0x4d,
	0x6f, 0x16, 0x91, 0x63, 0xc9, 0xd3, 0x82, 0xc6, 0x7b, 0x05, 0x30, 0xc7, 0xe2, 0x7e, 0x1d, 0x8e,
	0xa0, 0xab, 0xaa, 0x59, 0x44, 0xb2, 0x3b, 0xcb, 0xcf, 0x65, 0x6f, 0x07, 0x1f, 0xa8, 0xda, 0xf8,
	0x6b, 0xc2, 0x85, 0x8f, 0x79, 0x42, 0x63, 0x9e, 0xf6, 0xd3, 0x51, 0x26, 0xdc, 0x31, 0x5c, 0x73,
	0xdc, 0x9b, 0x7e, 0x52, 0x33, 0x0f, 0xe5, 0xe8, 0x67, 0x96, 0x68, 0x02, 0x16, 0x66, 0x8c, 0x32,
	0x99, 0xa4, 0x37, 0x3d, 0xab, 0xcc, 0xe0, 0xfb, 0xf4, 0xcc, 0x57, 0x26, 0x1e, 0x85, 0x81, 0x76,
	0xcf, 0x52, 0x7e, 0x05, 0xb6, 0xb2, 0x97, 0x0d, 0xdc, 0x99, 0x51, 0x1b, 0x3e, 0x28, 0xe1, 0x9f,
	0x6d, 0xb0, 0x95, 0x3b, 0x1a, 0x40, 0x8b, 0x44, 0x32, 0x8b, 0xe5, 0xb7, 0x48, 0x84, 0x5c, 0xe8,
	0xe9, 0x61, 0xcd, 0x68, 0x84, 0x9d, 0x13, 0x39, 0xbf, 0xa2, 0x0a, 0x9d, 0x81, 0x25, 0x88, 0x58,
	0x2b, 0x70, 0x9c, 0xf8, 0x4a, 0x40, 0x08, 0xda, 0x57, 0x34, 0xda, 0x3b, 0xa6, 0x54, 0xca, 0x6f,
	0xf4, 0x11, 0xd8, 0x37, 0x98, 0xac, 0xde, 0x09, 0x67, 0x20, 0xe3, 0x6b, 0xe9, 0x00, 0x65, 0xed,
	0x7f, 0x83, 0xb2, 0x22, 0x60, 0xac, 0x0a, 0x60, 0x9e, 0xc1, 0x20, 0x61, 0x78, 0x47, 0xe8, 0x96,
	0xab, 0x36, 0x1d, 0x5b, 0x5a, 0x54, 0xb4, 0x15, 0x60, 0x9d, 0x56, 0x81, 0x85, 0x26, 0x30, 0xcc,
	0xa4, 0x37, 0x94, 0x93, 0x34, 0xb7, 0xd3, 0x97, 0x56, 0x07, 0x7a, 0xf4, 0x05, 0xf4, 0x43, 0x86,
	0x03, 0x41, 0xd9, 0x92, 0x63, 0xb6, 0x88, 0x1c, 0x90, 0x86, 0x65, 0x65, 0x5a, 0x59, 0xc0, 0x39,
	0x59, 0xc5, 0x18, 0x6b, 0xb3, 0x9e, 0xaa, 0xac, 0xac, 0x4d, 0x41, 0x2c, 0x1d, 0x71, 0xf4, 0x52,
	0x38, 0x1d, 0xd7, 0x18, 0x9b, 0xfe, 0xad, 0x22, 0x3d, 0xdd, 0x26, 0x91, 0x3e, 0xed, 0xaa, 0xd3,
	0x5c, 0x91, 0x4e, 0x26, 0x0c, 0x04, 0x5e, 0x51, 0xb6, 0x77, 0x86, 0xf2, 0x3a, 0x72, 0xb9, 0xc0,
	0xcd, 0x47, 0x72, 0xe8, 0xf7, 0xe1, 0xa6, 0xf7, 0x9b, 0x01, 0x7d, 0x75, 0x30, 0xa3, 0x9b, 0x0d,
	0x8e, 0x8f, 0xa2, 0xa6, 0x75, 0x88, 0x9a, 0x22, 0xef, 0xcc, 0x32, 0xef, 0x72, 0xec, 0xb4, 0xcb,
	0xd8, 0xd9, 0xaa, 0x01, 0xa9, 0xcb, 0xd5, 0x92, 0xb7, 0x87, 0x47, 0xba, 0x88, 0x9c, 0x2c, 0x5f,
	0x43, 0x27, 0x54, 0x2a, 0xcd, 0x16, 0xb7, 0x91, 0x2d, 0x99, 0x6b, 0xe6, 0xf0, 0x20, 0xd6, 0xfc,
	0x61, 0x40, 0xef, 0x07, 0xba, 0xc3, 0xd9, 0xa2, 0xa9, 0x34, 0x6d, 0xdc, 0xdd, 0x74, 0x65, 0xd9,
	0xd4, 0x60, 0xd4, 0xac, 0xc5, 0xe8, 0x1d, 0x8b, 0xd1, 0xfb, 0xdd, 0x80, 0x8f, 0xd3, 0x8a, 0x7e,
	0x24, 0xe2, 0x1d, 0x89, 0x2f, 0xa5, 0xfa, 0xff, 0xa9, 0xae, 0xcc, 0x0c, 0xf3, 0x80, 0x19, 0x67,
	0x60, 0x51, 0x16, 0x61, 0xa6, 0x4b, 0x52, 0x82, 0xf7, 0xab, 0x01, 0x67, 0x7a, 0xc4, 0xe5, 0x15,
	0xfa, 0x2d, 0x74, 0xf5, 0xc4, 0xb3, 0x1d, 0x7a, 0xfc, 0x8e, 0x72, 0x8f, 0x07, 0x5d, 0xd2, 0x0b,
	0xe8, 0xce, 0x32, 0xb0, 0x23, 0x68, 0xc7, 0xc1, 0x26, 0xeb, 0x5d, 0x7e, 0xa7, 0x85, 0x87, 0x74,
	0x1b, 0x0b, 0xdd, 0xb1, 0x12, 0xbc, 0x05, 0x80, 0xf6, 0x22, 0x98, 0xa3, 0x6f, 0x00, 0xc2, 0x5c,
	0xd2, 0xf5, 0x3e, 0xae, 0xa9, 0x37, 0x4b, 0xe4, 0x17, 0xcc, 0x27, 0x2f, 0xe0, 0xb4, 0xb8, 0xb5,
	0x50, 0x0f, 0x3a, 0x57, 0x41, 0x78, 0xbd, 0xa6, 0xab, 0xe1, 0x7b, 0x08, 0xc0, 0x56, 0x97, 0x37,
	0x34, 0xd2, 0x83, 0x04, 0xc7, 0x11, 0x89, 0x57, 0xc3, 0xd6, 0xf4, 0x2f, 0x0b, 0x3a, 0xfa, 0xed,
	0x41, 0x3e, 0xd8, 0xea, 0xcd, 0x46, 0x75, 0x43, 0x2a, 0x3d, 0xe7, 0xa3, 0x67, 0x8d, 0x63, 0x2c,
	0x5f, 0xc0, 0x1c, 0xcc, 0x39, 0x16, 0xe8, 0x49, 0x7d, 0xc0, 0x2c, 0xda, 0xe7, 0xcd, 0xcf, 0x4c,
	0x16, 0xe8, 0x15, 0xd8, 0x33, 0xb9, 0x87, 0x50, 0xf3, 0x9b, 0x74, 0xcf, 0x38, 0x4b, 0xb9, 0xb1,
	0xfe, 0x63, 0x9c, 0xef, 0xa0, 0x9d, 0x32, 0x00, 0x3d, 0xad, 0x31, 0x2d, 0x90, 0x75, 0xf4, 0x61,
	0x05, 0x34, 0x6a, 0xc5, 0xa1, 0x25, 0x0c, 0xab, 0x04, 0x42, 0x93, 0x86, 0x50, 0x35, 0x2c, 0x6b,
	0x0e, 0xdb, 0x9b, 0xe7, 0x48, 0xe6, 0xc7, 0xc6, 0xfe, 0x65, 0x1d, 0xb6, 0xea, 0x68, 0xb4, 0x84,
	0xbe, 0x1a, 0x7e, 0xb6, 0x87, 0x8f, 0xb2, 0x68, 0xe4, 0x35, 0xc7, 0xce, 0xc3, 0xbe, 0x91, 0x3f,
	0x89, 0x05, 0x02, 0x1c, 0xc7, 0xdd, 0x93, 0x66, 0x3a, 0x10, 0xcc, 0xaf, 0x6c, 0xf9, 0xfb, 0xf9,
	0xfc, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x3a, 0xc6, 0x1b, 0xcd, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TicketsClient is the client API for Tickets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketsClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TicketsListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	Create(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*TicketResponse, error)
	Update(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*TicketResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*proto1.Status, error)
	MoveWithinSprint(ctx context.Context, in *MoveWithinSprintRequest, opts ...grpc.CallOption) (*proto1.Status, error)
	GetComments(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CommentsListResponse, error)
	CreateComment(ctx context.Context, in *TicketComment, opts ...grpc.CallOption) (*CommentResponse, error)
	GetCategories(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Categories, error)
}

type ticketsClient struct {
	cc *grpc.ClientConn
}

func NewTicketsClient(cc *grpc.ClientConn) TicketsClient {
	return &ticketsClient{cc}
}

func (c *ticketsClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TicketsListResponse, error) {
	out := new(TicketsListResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) Create(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) Update(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*proto1.Status, error) {
	out := new(proto1.Status)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) MoveWithinSprint(ctx context.Context, in *MoveWithinSprintRequest, opts ...grpc.CallOption) (*proto1.Status, error) {
	out := new(proto1.Status)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/MoveWithinSprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) GetComments(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CommentsListResponse, error) {
	out := new(CommentsListResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CreateComment(ctx context.Context, in *TicketComment, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) GetCategories(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/ticket.svc.ticket.Tickets/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketsServer is the server API for Tickets service.
type TicketsServer interface {
	GetAll(context.Context, *GetAllRequest) (*TicketsListResponse, error)
	Get(context.Context, *GetRequest) (*TicketResponse, error)
	Create(context.Context, *Ticket) (*TicketResponse, error)
	Update(context.Context, *Ticket) (*TicketResponse, error)
	Move(context.Context, *MoveRequest) (*proto1.Status, error)
	MoveWithinSprint(context.Context, *MoveWithinSprintRequest) (*proto1.Status, error)
	GetComments(context.Context, *GetRequest) (*CommentsListResponse, error)
	CreateComment(context.Context, *TicketComment) (*CommentResponse, error)
	GetCategories(context.Context, *GetAllRequest) (*Categories, error)
}

func RegisterTicketsServer(s *grpc.Server, srv TicketsServer) {
	s.RegisterService(&_Tickets_serviceDesc, srv)
}

func _Tickets_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).Create(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).Update(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_MoveWithinSprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveWithinSprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).MoveWithinSprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/MoveWithinSprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).MoveWithinSprint(ctx, req.(*MoveWithinSprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).GetComments(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateComment(ctx, req.(*TicketComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.ticket.Tickets/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).GetCategories(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tickets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.svc.ticket.Tickets",
	HandlerType: (*TicketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Tickets_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tickets_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Tickets_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tickets_Update_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Tickets_Move_Handler,
		},
		{
			MethodName: "MoveWithinSprint",
			Handler:    _Tickets_MoveWithinSprint_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Tickets_GetComments_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Tickets_CreateComment_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _Tickets_GetCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/app/services/ticket/proto/ticket.proto",
}
