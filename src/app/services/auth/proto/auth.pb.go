// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/app/services/auth/proto/auth.proto

package ticket_svc_auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionState struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	Role                 string   `protobuf:"bytes,2,opt,name=role,proto3" json:"role"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionState) Reset()         { *m = SessionState{} }
func (m *SessionState) String() string { return proto.CompactTextString(m) }
func (*SessionState) ProtoMessage()    {}
func (*SessionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7df1eb26ec42ce3, []int{0}
}

func (m *SessionState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionState.Unmarshal(m, b)
}
func (m *SessionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionState.Marshal(b, m, deterministic)
}
func (m *SessionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionState.Merge(m, src)
}
func (m *SessionState) XXX_Size() int {
	return xxx_messageInfo_SessionState.Size(m)
}
func (m *SessionState) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionState.DiscardUnknown(m)
}

var xxx_messageInfo_SessionState proto.InternalMessageInfo

func (m *SessionState) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SessionState) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type Session struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7df1eb26ec42ce3, []int{1}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Status struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7df1eb26ec42ce3, []int{2}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*SessionState)(nil), "ticket.svc.auth.SessionState")
	proto.RegisterType((*Session)(nil), "ticket.svc.auth.Session")
	proto.RegisterType((*Status)(nil), "ticket.svc.auth.Status")
}

func init() {
	proto.RegisterFile("src/app/services/auth/proto/auth.proto", fileDescriptor_c7df1eb26ec42ce3)
}

var fileDescriptor_c7df1eb26ec42ce3 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x59, 0x69, 0xb7, 0xed, 0x20, 0x08, 0x83, 0xe8, 0x52, 0x10, 0x97, 0x3d, 0x48, 0x4f,
	0x59, 0xd0, 0x9b, 0x78, 0x29, 0xf5, 0xe2, 0x75, 0x0b, 0xde, 0x63, 0x3a, 0xd0, 0xd0, 0xd2, 0x2c,
	0x99, 0x49, 0xc1, 0xff, 0xe8, 0x8f, 0x92, 0x8c, 0x7b, 0x10, 0xa5, 0xbd, 0xbd, 0x97, 0x99, 0xf7,
	0xf1, 0x32, 0xf0, 0xc0, 0xd1, 0xb5, 0xb6, 0xef, 0x5b, 0xa6, 0x78, 0xf4, 0x8e, 0xb8, 0xb5, 0x49,
	0xb6, 0x6d, 0x1f, 0x83, 0x04, 0x95, 0x46, 0x25, 0x5e, 0x89, 0x77, 0x3b, 0x12, 0xc3, 0x47, 0x67,
	0xf2, 0x73, 0xf3, 0x0c, 0x97, 0x6b, 0x62, 0xf6, 0xe1, 0xb0, 0x16, 0x2b, 0x84, 0x37, 0x50, 0x26,
	0xa6, 0xf8, 0xb6, 0xa9, 0x8a, 0xba, 0x58, 0x8c, 0xbb, 0xc1, 0x21, 0xc2, 0x28, 0x86, 0x3d, 0x55,
	0x17, 0x75, 0xb1, 0x98, 0x75, 0xaa, 0x9b, 0x7b, 0x98, 0x0c, 0x59, 0xbc, 0x86, 0xb1, 0x84, 0x1d,
	0x1d, 0x34, 0x35, 0xeb, 0x7e, 0x4c, 0x53, 0x43, 0x99, 0xa9, 0x89, 0x33, 0x96, 0x55, 0xe9, 0xc2,
	0xb4, 0x1b, 0xdc, 0xe3, 0x57, 0x01, 0xa3, 0x65, 0x92, 0x2d, 0x2e, 0xa1, 0x5c, 0x45, 0xca, 0x0d,
	0xee, 0xcc, 0x9f, 0x8e, 0xe6, 0x77, 0xc1, 0x79, 0x75, 0x6a, 0x8c, 0x2b, 0x98, 0xbe, 0xdb, 0xbd,
	0xdf, 0x64, 0xc8, 0xc9, 0xad, 0xf9, 0x79, 0x3c, 0xbe, 0xc0, 0xe4, 0x95, 0x58, 0x62, 0xf8, 0x3c,
	0xc3, 0xb8, 0xfd, 0x3f, 0xd1, 0xef, 0x7c, 0x94, 0x7a, 0xe5, 0xa7, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x48, 0xd1, 0x85, 0x2f, 0x8f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	Create(ctx context.Context, in *SessionState, opts ...grpc.CallOption) (*Session, error)
	Validate(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionState, error)
	Destroy(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Status, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Create(ctx context.Context, in *SessionState, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/ticket.svc.auth.Auth/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Validate(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionState, error) {
	out := new(SessionState)
	err := c.cc.Invoke(ctx, "/ticket.svc.auth.Auth/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Destroy(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ticket.svc.auth.Auth/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	Create(context.Context, *SessionState) (*Session, error)
	Validate(context.Context, *Session) (*SessionState, error)
	Destroy(context.Context, *Session) (*Status, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.auth.Auth/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Create(ctx, req.(*SessionState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.auth.Auth/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Validate(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.auth.Auth/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Destroy(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.svc.auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Auth_Create_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Auth_Validate_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Auth_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/app/services/auth/proto/auth.proto",
}
