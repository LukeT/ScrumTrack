// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/app/services/user/proto/user.proto

package ticket_svc_user

import (
	proto1 "app/common/proto"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Id struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{0}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Username struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Username) Reset()         { *m = Username{} }
func (m *Username) String() string { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()    {}
func (*Username) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{1}
}

func (m *Username) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Username.Unmarshal(m, b)
}
func (m *Username) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Username.Marshal(b, m, deterministic)
}
func (m *Username) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Username.Merge(m, src)
}
func (m *Username) XXX_Size() int {
	return xxx_messageInfo_Username.Size(m)
}
func (m *Username) XXX_DiscardUnknown() {
	xxx_messageInfo_Username.DiscardUnknown(m)
}

var xxx_messageInfo_Username proto.InternalMessageInfo

func (m *Username) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type Email struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Email) Reset()         { *m = Email{} }
func (m *Email) String() string { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()    {}
func (*Email) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{2}
}

func (m *Email) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Email.Unmarshal(m, b)
}
func (m *Email) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Email.Marshal(b, m, deterministic)
}
func (m *Email) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Email.Merge(m, src)
}
func (m *Email) XXX_Size() int {
	return xxx_messageInfo_Email.Size(m)
}
func (m *Email) XXX_DiscardUnknown() {
	xxx_messageInfo_Email.DiscardUnknown(m)
}

var xxx_messageInfo_Email proto.InternalMessageInfo

func (m *Email) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserPassword struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPassword) Reset()         { *m = UserPassword{} }
func (m *UserPassword) String() string { return proto.CompactTextString(m) }
func (*UserPassword) ProtoMessage()    {}
func (*UserPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{3}
}

func (m *UserPassword) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPassword.Unmarshal(m, b)
}
func (m *UserPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPassword.Marshal(b, m, deterministic)
}
func (m *UserPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPassword.Merge(m, src)
}
func (m *UserPassword) XXX_Size() int {
	return xxx_messageInfo_UserPassword.Size(m)
}
func (m *UserPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPassword.DiscardUnknown(m)
}

var xxx_messageInfo_UserPassword proto.InternalMessageInfo

func (m *UserPassword) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserPassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthUser struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email"`
	FirstName            string   `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Role                 string   `protobuf:"bytes,7,opt,name=role,proto3" json:"role"`
	Active               bool     `protobuf:"varint,8,opt,name=active,proto3" json:"active"`
	Disabled             bool     `protobuf:"varint,9,opt,name=disabled,proto3" json:"disabled"`
	ResetToken           string   `protobuf:"bytes,10,opt,name=reset_token,json=resetToken,proto3" json:"reset_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthUser) Reset()         { *m = AuthUser{} }
func (m *AuthUser) String() string { return proto.CompactTextString(m) }
func (*AuthUser) ProtoMessage()    {}
func (*AuthUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{4}
}

func (m *AuthUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthUser.Unmarshal(m, b)
}
func (m *AuthUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthUser.Marshal(b, m, deterministic)
}
func (m *AuthUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthUser.Merge(m, src)
}
func (m *AuthUser) XXX_Size() int {
	return xxx_messageInfo_AuthUser.Size(m)
}
func (m *AuthUser) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthUser.DiscardUnknown(m)
}

var xxx_messageInfo_AuthUser proto.InternalMessageInfo

func (m *AuthUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AuthUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AuthUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AuthUser) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *AuthUser) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *AuthUser) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *AuthUser) GetResetToken() string {
	if m != nil {
		return m.ResetToken
	}
	return ""
}

type UserList struct {
	Users                []*AuthUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{5}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*AuthUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserResponse struct {
	Error                *proto1.Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	User                 *AuthUser     `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{6}
}

func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (m *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(m, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *UserResponse) GetUser() *AuthUser {
	if m != nil {
		return m.User
	}
	return nil
}

type PasswordCheck struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordCheck) Reset()         { *m = PasswordCheck{} }
func (m *PasswordCheck) String() string { return proto.CompactTextString(m) }
func (*PasswordCheck) ProtoMessage()    {}
func (*PasswordCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_06e6c3ac3324d34a, []int{7}
}

func (m *PasswordCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordCheck.Unmarshal(m, b)
}
func (m *PasswordCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordCheck.Marshal(b, m, deterministic)
}
func (m *PasswordCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordCheck.Merge(m, src)
}
func (m *PasswordCheck) XXX_Size() int {
	return xxx_messageInfo_PasswordCheck.Size(m)
}
func (m *PasswordCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordCheck.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordCheck proto.InternalMessageInfo

func (m *PasswordCheck) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PasswordCheck) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Id)(nil), "ticket.svc.user.Id")
	proto.RegisterType((*Username)(nil), "ticket.svc.user.Username")
	proto.RegisterType((*Email)(nil), "ticket.svc.user.Email")
	proto.RegisterType((*UserPassword)(nil), "ticket.svc.user.UserPassword")
	proto.RegisterType((*AuthUser)(nil), "ticket.svc.user.AuthUser")
	proto.RegisterType((*UserList)(nil), "ticket.svc.user.UserList")
	proto.RegisterType((*UserResponse)(nil), "ticket.svc.user.UserResponse")
	proto.RegisterType((*PasswordCheck)(nil), "ticket.svc.user.PasswordCheck")
}

func init() {
	proto.RegisterFile("src/app/services/user/proto/user.proto", fileDescriptor_06e6c3ac3324d34a)
}

var fileDescriptor_06e6c3ac3324d34a = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0xdc, 0xd8, 0x4d, 0xa6, 0x0d, 0x48, 0x4b, 0xa8, 0x8c, 0xab, 0x40, 0xe4, 0x43, 0x15,
	0x21, 0x91, 0x48, 0xe1, 0x42, 0xcb, 0x01, 0xb5, 0x21, 0x54, 0x91, 0x10, 0x42, 0x86, 0x72, 0xad,
	0x5c, 0x7b, 0x50, 0x57, 0xb1, 0xb3, 0xd6, 0xee, 0x26, 0xa8, 0x7f, 0x80, 0x1b, 0xff, 0x19, 0xed,
	0xf8, 0x03, 0x12, 0x9b, 0x70, 0x9b, 0x99, 0x37, 0xfb, 0xf6, 0xf9, 0xbd, 0x4d, 0xe0, 0x4c, 0xc9,
	0x68, 0x12, 0x66, 0xd9, 0x44, 0xa1, 0xdc, 0xf0, 0x08, 0xd5, 0x64, 0xad, 0x50, 0x4e, 0x32, 0x29,
	0xb4, 0xa0, 0x72, 0x4c, 0x25, 0x7b, 0xac, 0x79, 0xb4, 0x44, 0x3d, 0x56, 0x9b, 0x68, 0x6c, 0xc6,
	0xde, 0x71, 0x24, 0xd2, 0x54, 0xac, 0x72, 0xd8, 0xef, 0x83, 0xb5, 0x88, 0xd9, 0x23, 0xb0, 0x78,
	0xec, 0xb6, 0x86, 0xad, 0x91, 0x1d, 0x58, 0x3c, 0xf6, 0xcf, 0xa0, 0x73, 0xa3, 0x50, 0xae, 0xc2,
	0x14, 0x99, 0x07, 0x9d, 0x75, 0x51, 0xd3, 0x46, 0x37, 0xa8, 0x7a, 0x7f, 0x00, 0xf6, 0x3c, 0x0d,
	0x79, 0xc2, 0xfa, 0x60, 0xa3, 0x29, 0x8a, 0x8d, 0xbc, 0xf1, 0x2f, 0xe0, 0xd8, 0xd0, 0x7c, 0x0e,
	0x95, 0xfa, 0x21, 0x64, 0xed, 0x1a, 0x43, 0x9d, 0x15, 0x98, 0x6b, 0xe5, 0xd4, 0x65, 0xef, 0xff,
	0xb2, 0xa0, 0x73, 0xb9, 0xd6, 0xf7, 0x86, 0xa0, 0xe9, 0x60, 0xa5, 0xc9, 0xda, 0xd6, 0xb4, 0x45,
	0x7a, 0xb0, 0x4d, 0xfa, 0x47, 0x66, 0xfb, 0x2f, 0x99, 0x6c, 0x00, 0xf0, 0x9d, 0x4b, 0xa5, 0x6f,
	0x89, 0xcf, 0x26, 0xa8, 0x4b, 0x93, 0x4f, 0x86, 0xf0, 0x14, 0xba, 0x49, 0x58, 0xa2, 0x4e, 0xce,
	0x68, 0x06, 0x04, 0x32, 0x68, 0x4b, 0x91, 0xa0, 0x7b, 0x48, 0x73, 0xaa, 0xd9, 0x09, 0x38, 0x61,
	0xa4, 0xf9, 0x06, 0xdd, 0xce, 0xb0, 0x35, 0xea, 0x04, 0x45, 0x67, 0x94, 0xc5, 0x5c, 0x85, 0x77,
	0x09, 0xc6, 0x6e, 0x97, 0x90, 0xaa, 0x67, 0x2f, 0xe0, 0x48, 0xa2, 0x42, 0x7d, 0xab, 0xc5, 0x12,
	0x57, 0x2e, 0x10, 0x1d, 0xd0, 0xe8, 0xab, 0x99, 0xf8, 0x6f, 0xf3, 0x48, 0x3e, 0x72, 0xa5, 0xd9,
	0x04, 0x6c, 0xf3, 0xb9, 0xca, 0x6d, 0x0d, 0x0f, 0x46, 0x47, 0xd3, 0x67, 0xe3, 0x9d, 0x8c, 0xc7,
	0xa5, 0x71, 0x41, 0xbe, 0xe7, 0xf3, 0x3c, 0x88, 0x00, 0x55, 0x26, 0x56, 0x0a, 0xd9, 0x4b, 0xb0,
	0x51, 0x4a, 0x21, 0xc9, 0xd2, 0xa3, 0x69, 0xbf, 0x24, 0x28, 0x9e, 0xc6, 0xdc, 0x60, 0x41, 0xbe,
	0xc2, 0x5e, 0x41, 0xdb, 0x90, 0x90, 0xcf, 0x7b, 0xef, 0xa2, 0x35, 0x7f, 0x06, 0xbd, 0x32, 0xef,
	0xd9, 0x3d, 0x46, 0x4b, 0xe3, 0x86, 0x01, 0x16, 0x65, 0x7e, 0x45, 0xb7, 0x2f, 0xfc, 0xe9, 0xcf,
	0x36, 0xb4, 0x29, 0xf8, 0x73, 0x38, 0xbc, 0x46, 0x7d, 0xf5, 0xb0, 0x88, 0xd9, 0x93, 0xda, 0xcd,
	0x8b, 0xd8, 0xfb, 0xb7, 0x1c, 0x36, 0x87, 0x1e, 0x1d, 0xad, 0x1e, 0x72, 0x7d, 0xb7, 0x84, 0xf6,
	0xd1, 0xbc, 0x03, 0x20, 0x9a, 0xfc, 0x9d, 0x9f, 0xd4, 0x16, 0x69, 0xbe, 0x8f, 0xe0, 0x1c, 0x9c,
	0x6b, 0xd4, 0x97, 0x49, 0xc2, 0x6a, 0x36, 0xa7, 0x99, 0x7e, 0xf0, 0x9a, 0x65, 0x51, 0xce, 0x1f,
	0xa0, 0x47, 0x1e, 0x56, 0x3f, 0xa0, 0xe7, 0xb5, 0xdd, 0x2d, 0xaf, 0xbd, 0xa7, 0x3b, 0x37, 0x7c,
	0xd1, 0xa1, 0x5e, 0x2b, 0xf6, 0x06, 0x9c, 0x99, 0xc4, 0x50, 0x37, 0x79, 0x50, 0xea, 0xf4, 0x9a,
	0xfc, 0x65, 0x57, 0xe0, 0xdc, 0x64, 0xf1, 0x7f, 0x4e, 0x0e, 0x1a, 0xbf, 0xa0, 0x7a, 0x6c, 0x17,
	0xe0, 0xbc, 0xc7, 0x04, 0x35, 0x36, 0x47, 0x78, 0xba, 0xa3, 0xf9, 0x9b, 0xe0, 0x71, 0x79, 0xf6,
	0xce, 0xa1, 0x7f, 0xa9, 0xd7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xa5, 0xc4, 0x25, 0xee,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AuthUser, error)
	GetByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*AuthUser, error)
	GetByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*AuthUser, error)
	GetAll(ctx context.Context, in *proto1.Empty, opts ...grpc.CallOption) (*UserList, error)
	CheckPassword(ctx context.Context, in *PasswordCheck, opts ...grpc.CallOption) (*proto1.Status, error)
	Create(ctx context.Context, in *AuthUser, opts ...grpc.CallOption) (*Id, error)
	Update(ctx context.Context, in *AuthUser, opts ...grpc.CallOption) (*UserResponse, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*proto1.VoidResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AuthUser, error) {
	out := new(AuthUser)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*AuthUser, error) {
	out := new(AuthUser)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/GetByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*AuthUser, error) {
	out := new(AuthUser)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/GetByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAll(ctx context.Context, in *proto1.Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckPassword(ctx context.Context, in *PasswordCheck, opts ...grpc.CallOption) (*proto1.Status, error) {
	out := new(proto1.Status)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Create(ctx context.Context, in *AuthUser, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Update(ctx context.Context, in *AuthUser, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*proto1.VoidResponse, error) {
	out := new(proto1.VoidResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.user.User/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	GetById(context.Context, *Id) (*AuthUser, error)
	GetByUsername(context.Context, *Username) (*AuthUser, error)
	GetByEmail(context.Context, *Email) (*AuthUser, error)
	GetAll(context.Context, *proto1.Empty) (*UserList, error)
	CheckPassword(context.Context, *PasswordCheck) (*proto1.Status, error)
	Create(context.Context, *AuthUser) (*Id, error)
	Update(context.Context, *AuthUser) (*UserResponse, error)
	Delete(context.Context, *Id) (*proto1.VoidResponse, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/GetByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetByUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/GetByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetByEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAll(ctx, req.(*proto1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckPassword(ctx, req.(*PasswordCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Create(ctx, req.(*AuthUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Update(ctx, req.(*AuthUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.user.User/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.svc.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _User_GetById_Handler,
		},
		{
			MethodName: "GetByUsername",
			Handler:    _User_GetByUsername_Handler,
		},
		{
			MethodName: "GetByEmail",
			Handler:    _User_GetByEmail_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _User_GetAll_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _User_CheckPassword_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _User_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _User_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _User_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/app/services/user/proto/user.proto",
}
