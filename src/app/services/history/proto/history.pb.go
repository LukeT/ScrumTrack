// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/app/services/history/proto/history.proto

package ticket_svc_history

import (
	proto1 "app/common/proto"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogItem struct {
	Id                   int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProjectCode          string         `protobuf:"bytes,8,opt,name=projectCode,proto3" json:"projectCode"`
	TicketId             int32          `protobuf:"varint,2,opt,name=ticketId,proto3" json:"ticketId"`
	SprintId             int32          `protobuf:"varint,3,opt,name=sprintId,proto3" json:"sprintId"`
	Type                 proto1.LogType `protobuf:"varint,4,opt,name=type,proto3,enum=ticket.common.LogType" json:"type"`
	Old                  string         `protobuf:"bytes,5,opt,name=old,proto3" json:"old"`
	New                  string         `protobuf:"bytes,6,opt,name=new,proto3" json:"new"`
	Internal             bool           `protobuf:"varint,9,opt,name=internal,proto3" json:"internal"`
	CreatedAt            int64          `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LogItem) Reset()         { *m = LogItem{} }
func (m *LogItem) String() string { return proto.CompactTextString(m) }
func (*LogItem) ProtoMessage()    {}
func (*LogItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fae6933499173970, []int{0}
}

func (m *LogItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogItem.Unmarshal(m, b)
}
func (m *LogItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogItem.Marshal(b, m, deterministic)
}
func (m *LogItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogItem.Merge(m, src)
}
func (m *LogItem) XXX_Size() int {
	return xxx_messageInfo_LogItem.Size(m)
}
func (m *LogItem) XXX_DiscardUnknown() {
	xxx_messageInfo_LogItem.DiscardUnknown(m)
}

var xxx_messageInfo_LogItem proto.InternalMessageInfo

func (m *LogItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogItem) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *LogItem) GetTicketId() int32 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *LogItem) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *LogItem) GetType() proto1.LogType {
	if m != nil {
		return m.Type
	}
	return proto1.LogType_SPRINT_CHANGED
}

func (m *LogItem) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *LogItem) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

func (m *LogItem) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *LogItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type LogSprint struct {
	ProjectCode          string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode"`
	SprintId             int32    `protobuf:"varint,2,opt,name=sprintId,proto3" json:"sprintId"`
	From                 int64    `protobuf:"varint,3,opt,name=from,proto3" json:"from"`
	To                   int64    `protobuf:"varint,4,opt,name=to,proto3" json:"to"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogSprint) Reset()         { *m = LogSprint{} }
func (m *LogSprint) String() string { return proto.CompactTextString(m) }
func (*LogSprint) ProtoMessage()    {}
func (*LogSprint) Descriptor() ([]byte, []int) {
	return fileDescriptor_fae6933499173970, []int{1}
}

func (m *LogSprint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogSprint.Unmarshal(m, b)
}
func (m *LogSprint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogSprint.Marshal(b, m, deterministic)
}
func (m *LogSprint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogSprint.Merge(m, src)
}
func (m *LogSprint) XXX_Size() int {
	return xxx_messageInfo_LogSprint.Size(m)
}
func (m *LogSprint) XXX_DiscardUnknown() {
	xxx_messageInfo_LogSprint.DiscardUnknown(m)
}

var xxx_messageInfo_LogSprint proto.InternalMessageInfo

func (m *LogSprint) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *LogSprint) GetSprintId() int32 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *LogSprint) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *LogSprint) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

type LogTicket struct {
	ProjectCode          string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode"`
	TicketId             int32    `protobuf:"varint,2,opt,name=ticketId,proto3" json:"ticketId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogTicket) Reset()         { *m = LogTicket{} }
func (m *LogTicket) String() string { return proto.CompactTextString(m) }
func (*LogTicket) ProtoMessage()    {}
func (*LogTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_fae6933499173970, []int{2}
}

func (m *LogTicket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogTicket.Unmarshal(m, b)
}
func (m *LogTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogTicket.Marshal(b, m, deterministic)
}
func (m *LogTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogTicket.Merge(m, src)
}
func (m *LogTicket) XXX_Size() int {
	return xxx_messageInfo_LogTicket.Size(m)
}
func (m *LogTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_LogTicket.DiscardUnknown(m)
}

var xxx_messageInfo_LogTicket proto.InternalMessageInfo

func (m *LogTicket) GetProjectCode() string {
	if m != nil {
		return m.ProjectCode
	}
	return ""
}

func (m *LogTicket) GetTicketId() int32 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

type LogsResponse struct {
	Logs                 []*LogItem    `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs"`
	Error                *proto1.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LogsResponse) Reset()         { *m = LogsResponse{} }
func (m *LogsResponse) String() string { return proto.CompactTextString(m) }
func (*LogsResponse) ProtoMessage()    {}
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fae6933499173970, []int{3}
}

func (m *LogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsResponse.Unmarshal(m, b)
}
func (m *LogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsResponse.Marshal(b, m, deterministic)
}
func (m *LogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsResponse.Merge(m, src)
}
func (m *LogsResponse) XXX_Size() int {
	return xxx_messageInfo_LogsResponse.Size(m)
}
func (m *LogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogsResponse proto.InternalMessageInfo

func (m *LogsResponse) GetLogs() []*LogItem {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *LogsResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type LogResponse struct {
	Log                  *LogItem      `protobuf:"bytes,1,opt,name=log,proto3" json:"log"`
	Error                *proto1.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fae6933499173970, []int{4}
}

func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (m *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(m, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func (m *LogResponse) GetLog() *LogItem {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogResponse) GetError() *proto1.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*LogItem)(nil), "ticket.svc.history.LogItem")
	proto.RegisterType((*LogSprint)(nil), "ticket.svc.history.LogSprint")
	proto.RegisterType((*LogTicket)(nil), "ticket.svc.history.LogTicket")
	proto.RegisterType((*LogsResponse)(nil), "ticket.svc.history.LogsResponse")
	proto.RegisterType((*LogResponse)(nil), "ticket.svc.history.LogResponse")
}

func init() {
	proto.RegisterFile("src/app/services/history/proto/history.proto", fileDescriptor_fae6933499173970)
}

var fileDescriptor_fae6933499173970 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x61, 0x8b, 0xd3, 0x40,
	0x10, 0x65, 0x93, 0xf6, 0xda, 0x4e, 0x8e, 0x43, 0x16, 0x91, 0xa5, 0x2a, 0x86, 0x7c, 0x0a, 0x87,
	0x26, 0x50, 0x7f, 0x81, 0x1e, 0xa2, 0x85, 0xe0, 0x87, 0xf5, 0xfe, 0x40, 0x4d, 0xc6, 0x5c, 0xbc,
	0x26, 0x13, 0x76, 0x97, 0x3b, 0xfa, 0xa7, 0xfd, 0x07, 0x82, 0xec, 0x6e, 0xda, 0x93, 0x6a, 0xb4,
	0xf7, 0x6d, 0x67, 0xde, 0xe4, 0xbd, 0x79, 0x6f, 0x08, 0xbc, 0xd6, 0xaa, 0xcc, 0x37, 0x7d, 0x9f,
	0x6b, 0x54, 0x77, 0x4d, 0x89, 0x3a, 0xbf, 0x69, 0xb4, 0x21, 0xb5, 0xcb, 0x7b, 0x45, 0x86, 0xf6,
	0x55, 0xe6, 0x2a, 0xce, 0x4d, 0x53, 0xde, 0xa2, 0xc9, 0xf4, 0x5d, 0x99, 0x0d, 0xc8, 0xf2, 0xbc,
	0xa4, 0xb6, 0xa5, 0xce, 0x4f, 0x24, 0x3f, 0x19, 0xcc, 0x0a, 0xaa, 0xd7, 0x06, 0x5b, 0x7e, 0x01,
	0x41, 0x53, 0x09, 0x16, 0xb3, 0x74, 0x2a, 0x83, 0xa6, 0xe2, 0x31, 0x44, 0xbd, 0xa2, 0xef, 0x58,
	0x9a, 0x2b, 0xaa, 0x50, 0xcc, 0x63, 0x96, 0x2e, 0xe4, 0xef, 0x2d, 0xbe, 0x84, 0xb9, 0x57, 0x58,
	0x57, 0x22, 0x70, 0xdf, 0x1d, 0x6a, 0x8b, 0xe9, 0x5e, 0x35, 0x9d, 0xc5, 0x42, 0x8f, 0xed, 0x6b,
	0x7e, 0x09, 0x13, 0xb3, 0xeb, 0x51, 0x4c, 0x62, 0x96, 0x5e, 0xac, 0x9e, 0x65, 0xc3, 0x9a, 0xc3,
	0x66, 0x05, 0xd5, 0xd7, 0xbb, 0x1e, 0xa5, 0x9b, 0xe1, 0x4f, 0x20, 0xa4, 0x6d, 0x25, 0xa6, 0x4e,
	0xdd, 0x3e, 0x6d, 0xa7, 0xc3, 0x7b, 0x71, 0xe6, 0x3b, 0x1d, 0xde, 0x5b, 0xad, 0xa6, 0x33, 0xa8,
	0xba, 0xcd, 0x56, 0x2c, 0x62, 0x96, 0xce, 0xe5, 0xa1, 0xe6, 0x2f, 0x60, 0x51, 0x2a, 0xdc, 0x18,
	0xac, 0xde, 0x19, 0x31, 0x8b, 0x59, 0x1a, 0xca, 0x87, 0x46, 0xd2, 0xc2, 0xa2, 0xa0, 0xfa, 0x8b,
	0x5b, 0xec, 0xd8, 0x30, 0xfb, 0xab, 0xe1, 0x83, 0xa9, 0xe0, 0xc8, 0x14, 0x87, 0xc9, 0x37, 0x45,
	0xad, 0x33, 0x1b, 0x4a, 0xf7, 0xb6, 0x91, 0x1a, 0x72, 0x36, 0x43, 0x19, 0x18, 0x4a, 0xd6, 0x4e,
	0xee, 0xda, 0xd9, 0x3d, 0x4d, 0x6e, 0x2c, 0xdf, 0xe4, 0x16, 0xce, 0x0b, 0xaa, 0xb5, 0x44, 0xdd,
	0x53, 0xa7, 0x91, 0xe7, 0x30, 0xd9, 0x52, 0xad, 0x05, 0x8b, 0xc3, 0x34, 0x5a, 0x3d, 0xcf, 0xfe,
	0x3c, 0x7d, 0x36, 0x1c, 0x5a, 0xba, 0x41, 0x7e, 0x09, 0x53, 0x54, 0x8a, 0x94, 0x63, 0x8e, 0x56,
	0x4f, 0x8f, 0xae, 0xf0, 0xc1, 0x62, 0xd2, 0x8f, 0x24, 0x37, 0x10, 0x15, 0x54, 0x1f, 0xb4, 0xde,
	0x40, 0xb8, 0xa5, 0xda, 0x6d, 0xfc, 0x1f, 0x29, 0x3b, 0xf7, 0x18, 0xa5, 0xd5, 0x0f, 0x06, 0xb3,
	0x4f, 0x9e, 0x84, 0x7f, 0x86, 0xe8, 0x23, 0x9a, 0xf7, 0xbb, 0xe1, 0x3c, 0x2f, 0x47, 0x84, 0x3c,
	0xbc, 0x8c, 0x47, 0xe0, 0x87, 0x88, 0xf6, 0x7c, 0x43, 0xfe, 0x63, 0x7c, 0x1e, 0x3e, 0x81, 0xef,
	0x0a, 0xc2, 0x82, 0x6a, 0xfe, 0xaf, 0x00, 0x96, 0xaf, 0x46, 0xc0, 0x3d, 0xc9, 0xd7, 0x33, 0xf7,
	0x23, 0xbe, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xb2, 0x97, 0xad, 0xda, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HistoryClient is the client API for History service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistoryClient interface {
	GetBySprint(ctx context.Context, in *LogSprint, opts ...grpc.CallOption) (*LogsResponse, error)
	GetByTicket(ctx context.Context, in *LogTicket, opts ...grpc.CallOption) (*LogsResponse, error)
	Log(ctx context.Context, in *LogItem, opts ...grpc.CallOption) (*LogResponse, error)
}

type historyClient struct {
	cc *grpc.ClientConn
}

func NewHistoryClient(cc *grpc.ClientConn) HistoryClient {
	return &historyClient{cc}
}

func (c *historyClient) GetBySprint(ctx context.Context, in *LogSprint, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.history.History/GetBySprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) GetByTicket(ctx context.Context, in *LogTicket, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.history.History/GetByTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) Log(ctx context.Context, in *LogItem, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/ticket.svc.history.History/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryServer is the server API for History service.
type HistoryServer interface {
	GetBySprint(context.Context, *LogSprint) (*LogsResponse, error)
	GetByTicket(context.Context, *LogTicket) (*LogsResponse, error)
	Log(context.Context, *LogItem) (*LogResponse, error)
}

func RegisterHistoryServer(s *grpc.Server, srv HistoryServer) {
	s.RegisterService(&_History_serviceDesc, srv)
}

func _History_GetBySprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogSprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).GetBySprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.history.History/GetBySprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).GetBySprint(ctx, req.(*LogSprint))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_GetByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).GetByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.history.History/GetByTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).GetByTicket(ctx, req.(*LogTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.svc.history.History/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).Log(ctx, req.(*LogItem))
	}
	return interceptor(ctx, in, info, handler)
}

var _History_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.svc.history.History",
	HandlerType: (*HistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBySprint",
			Handler:    _History_GetBySprint_Handler,
		},
		{
			MethodName: "GetByTicket",
			Handler:    _History_GetByTicket_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _History_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/app/services/history/proto/history.proto",
}
